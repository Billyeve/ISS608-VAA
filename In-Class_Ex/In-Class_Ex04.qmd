---
title: "In-Class Exercise 03"
author: "Bryant Philippe Lee"
date: February 4, 2023
date-modified: "`r Sys.Date()`"
fontsize: smaller
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## Overview 

This is a walk through of In-Class Exercise 4

## Getting Started - Plotly and Statistical Visualization

### Installing and Loading R Packages

```{r}
pacman::p_load(plotly, DT, patchwork, crosstalk, ggstatsplot, readxl, performance, parameters, see, tidyverse)
```

### Importing Data

This code chunk is to import the data from Exam_data.csv file to the Quarto/R page.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

### **Working with visual variable: plot_ly() method**

In the code chunk below, *color* argument is mapped to a qualitative visual variable (i.e.Â RACE).

```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```

### **Creating an interactive scatter plot: ggplotly() method**

The code chunk below plots an interactive scatter plot by using *ggplotly()*.

```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

ggplotly(p)
```

### **Two-sample mean test: *ggbetweenstats()***

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.

```{r}
ggbetweenstats(
  data = exam_data,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

### **Significant Test of Correlation: *ggscatterstats()***

In the code chunk below, [*ggscatterstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam_data,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

## Getting Started - Visualizing Models

### Installing and Loading R Packages

```{r}
pacman::p_load(plotly, DT, patchwork, crosstalk, ggstatsplot, readxl, performance, parameters, see, tidyverse)
```

### Importing Data

In the code chunk below, [*read_xls()*](https://readxl.tidyverse.org/reference/read_excel.html) of [**readxl**](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

### **Multiple Regression Model using lm()**

The code chunk below is used to calibrate a multiple linear regression model by using *lm()* of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### **Model Diagnostic: checking for multicolinearity:**

In the code chunk, [*check_collinearity()*](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
check_collinearity(model)

check_c <- check_collinearity(model)
plot(check_c)
```

### **Model Diagnostic: checking normality assumption**

In the code chunk, [*check_normality()*](https://easystats.github.io/performance/reference/check_normality.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

check_n <- check_normality(model1)

plot(check_n)
```

### **Model Diagnostic: Check model for homogeneity of variances**

In the code chunk, [*check_heteroscedasticity()*](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
check_h <- check_heteroscedasticity(model1)

plot(check_h)
```

### **Model Diagnostic: Complete check**

We can also perform the complete by using [*check_model()*](https://easystats.github.io/performance/reference/check_model.html).

```{r}
#| fig-height: 16
#| fig-width: 16
check_model(model1)
```

### **Visualizing the uncertainty of point estimates: ggplot2 methods**

The code chunk below performs the followings:

-   group the observation by RACE,

-   computes the count of observations, mean, standard deviation and standard error of Maths by RACE, and

-   save the output as a tibble data table called `my_sum`.

```{r}
my_sum <- exam %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))

knitr::kable(head(my_sum), format = 'html')
```

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    size=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean 
          maths score by rac")
```
