[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04.2.html",
    "title": "Hands-on Exercise 04.2",
    "section": "",
    "text": "A point estimate is a single number, such as a mean.\nUncertainty is expressed as standard error, confidence interval, or credible interval\nImportant:\n\nDon’t confuse the uncertainty of a point estimate with the variation in the sample\n\n\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate, ggpubr)\n\n\nexam <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nThe code chunk below performs the followings:\n\ngroup the observation by RACE,\ncomputes the count of observations, mean, standard deviation and standard error of Maths by RACE, and\nsave the output as a tibble data table called my_sum.\n\n\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\nNote: For the mathematical explanation, please refer to Slide 20 of Lesson 4.\nNext, the code chunk below will\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\n\n\nThe code chunk below is used to reveal the standard error of mean maths score by race.\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE,-mean), \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.95, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\np <- ggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE,-mean), \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.99, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"99% confidence interval of mean maths score by race\")\n\npp <- highlight(ggplotly(p))\n\nd <- highlight_key(my_sum)\n\ncrosstalk::bscols(pp,\n                  DT::datatable(d))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.2.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex04.2.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on Exercise 04.2",
    "section": "Visualising Uncertainty: ggdist package",
    "text": "Visualising Uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +   #<<\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\nexam %>%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat =\nStatPointinterval, : Ignoring unknown parameters: `.point` and `.interval`\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %>%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\nWarning: fill_type = \"gradient\" is not supported by the current graphics device.\n - Falling back to fill_type = \"segments\".\n - If you believe your current graphics device *does* support\n   fill_type = \"gradient\" but auto-detection failed, set that option\n   explicitly and consider reporting a bug.\n - See help(\"geom_slabinterval\") for more information.\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.2.html#visualizing-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex04.2.html#visualizing-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Hands-on Exercise 04.2",
    "section": "Visualizing Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualizing Uncertainty with Hypothetical Outcome Plots (HOPs)\nStep 1: Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nSkipping install of 'ungeviz' from a github remote, the SHA1 (aeae12b0) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\nNote: You only need to perform this step once.\nStep 2: Launch the application in R\n\nlibrary(ungeviz)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.2.html#visualizing-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "href": "Hands-on_Ex/Hands-on_Ex04.2.html#visualizing-uncertainty-with-hypothetical-outcome-plots-hops-1",
    "title": "Hands-on Exercise 04.2",
    "section": "Visualizing Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "Visualizing Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04.3.html",
    "title": "Hands-on Exercise 04.3",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.3.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04.3.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 04.3",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nIn this exercise, four R packages will be used. They are:\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.3.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04.3.html#importing-data",
    "title": "Hands-on Exercise 04.3",
    "section": "Importing Data",
    "text": "Importing Data\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\ncovid19 <- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %>%\n  mutate_if(is.character, as.factor)\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.3.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04.3.html#funnelplotr-methods",
    "title": "Hands-on Exercise 04.3",
    "section": "FunnelPlotR methods",
    "text": "FunnelPlotR methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\nFunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\nFunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #<<\n  xrange = c(0, 6500),  #<<\n  yrange = c(0, 0.05)   #<<\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead. For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead. For more options, see the help: `?funnel_plot`\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis\n\n\nFunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #<<           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #<<\n  y_label = \"Cumulative Fatality Rate\"  #<<\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead. For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead. For more options, see the help: `?funnel_plot`\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.3.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04.3.html#funnel-plot-for-fair-visual-comparison-ggplot2-methods",
    "title": "Hands-on Exercise 04.3",
    "section": "Funnel Plot for Fair Visual Comparison: ggplot2 methods",
    "text": "Funnel Plot for Fair Visual Comparison: ggplot2 methods\nIn this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.\n\nComputing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf <- covid19 %>%\n  mutate(rate = Death / Positive) %>%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%\n  filter(rate > 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq <- seq(1, max(df$Positive), 1)\nnumber.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI <- data.frame(number.ll95, number.ul95, number.ll999, number.ul999, number.seq, fit.mean)\n\n\n\nPlotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np <- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np\n\n\n\n\n\n\nInteractive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly <- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.3.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex04.3.html#references",
    "title": "Hands-on Exercise 04.3",
    "section": "References",
    "text": "References\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04.1.html",
    "title": "Hands-on Exercise 04.1",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.1.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex04.1.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on Exercise 04.1",
    "section": "Visual Statistical Analysis with ggstatsplot",
    "text": "Visual Statistical Analysis with ggstatsplot\n\n\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04.1.html#getting-started",
    "title": "Hands-on Exercise 04.1",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nImporting data\n\n\n\n\n\n\nDo-it-Yourself\n\n\n\nImporting Exam.csv data by using appropriate tidyverse package.\n\n\n\nexam <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nOne-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nUnpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\nHow to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n\nTwo-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\nOneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything\n\n\nggbetweenstats - Summary of tests\n\n\n\n\n\n\nSignificant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\nSignificant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 <- exam %>% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.1.html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04.1.html#visualising-models",
    "title": "Hands-on Exercise 04.1",
    "section": "Visualising Models",
    "text": "Visualising Models\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n\nToyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.1.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04.1.html#getting-started-1",
    "title": "Hands-on Exercise 04.1",
    "section": "Getting Started",
    "text": "Getting Started"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04.1.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex04.1.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 04.1",
    "section": "Installing and loading the required libraries",
    "text": "Installing and loading the required libraries\n\npacman::p_load(readxl, performance, parameters, see)\n\n\nImporting Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\nNotice that the output object car_resale is a tibble data frame.\n\n\nMultiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nModel Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\nModel Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\nVisualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))\n\n\n\n\n\n\nVisualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.1.html",
    "href": "Hands-on_Ex/Hands-on_Ex05.1.html",
    "title": "Hands-on Exercise 05.1",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It's display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.1.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05.1.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 05.1",
    "section": "Installing and launching R packages",
    "text": "Installing and launching R packages\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\nggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, an R package for creating interactive web-based graphs via plotly's JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nWe will also need to ensure that selected tidyverse family packages namely: readr, dplyr and tidyr are also installed and loaded.\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\nThe code chunks below will accomplish the task.\n\npacman::p_load(ggtern, plotly, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.1.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05.1.html#data-preparation",
    "title": "Hands-on Exercise 05.1",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nThe data\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n\nImporting Data\nTo important respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPreparing the Data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.1.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex05.1.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on Exercise 05.1",
    "section": "Plotting Ternary Diagram with R",
    "text": "Plotting Ternary Diagram with R\n\nPlotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\nPlotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n\nNo scatterternary mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.2.html",
    "href": "Hands-on_Ex/Hands-on_Ex05.2.html",
    "title": "Hands-on Exercise 05.2",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression's estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that \"similar\" variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.2.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05.2.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 05.2",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nBefore you get started, you are required:\n\nto start a new R project, and\nto create a new R Markdown document.\n\nNext, you will use the code chunk below to install and launch corrplot, ggpubr, plotly and tidyverse in RStudio.\n\npacman::p_load(corrplot, tidyverse, ggstatsplot, ggcorrplot)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.2.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05.2.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 05.2",
    "section": "Importing and Preparing The Data Set",
    "text": "Importing and Preparing The Data Set\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\nImporting Data\nFirst, let us import the data into R by using read_csv() of readr package.\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.2.html#building-correlation-matrix-pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex05.2.html#building-correlation-matrix-pairs-method",
    "title": "Hands-on Exercise 05.2",
    "section": "Building Correlation Matrix: pairs() method",
    "text": "Building Correlation Matrix: pairs() method\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.\nBefore you continue to the next step, you should read the syntax description of pairsfunction.\n\nBuilding a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])\n\n\n\n\n\n\nDrawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\nIncluding with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon't worry about the details for now-just type this code into your R session or script. Let's have more fun way to display the correlation matrix.\n\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.2.html#visualising-correlation-matrix-ggcormat",
    "href": "Hands-on_Ex/Hands-on_Ex05.2.html#visualising-correlation-matrix-ggcormat",
    "title": "Hands-on Exercise 05.2",
    "section": "Visualising Correlation Matrix: ggcormat()",
    "text": "Visualising Correlation Matrix: ggcormat()\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, you will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplot package.\n\nThe basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it's ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n\n\n\nBuilding multiple plots\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\nThings to learn from the code chunk above:\n\nto build a facet plot, the only argument needed is grouping.var.\nBehind group_ggcorrmat(), patchwork package is used to create the multiplot. plotgrid.args argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.\nLikewise, annotation.args argument is calling plot annotation arguments of patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.2.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex05.2.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands-on Exercise 05.2",
    "section": "Visualising Correlation Matrix using corrplot Package",
    "text": "Visualising Correlation Matrix using corrplot Package\nIn this hands-on exercise, we will focus on corrplot. However, you are encouraged to explore the other two packages too.\nBefore getting started, you are required to read An Introduction to corrplot Package in order to gain basic understanding of corrplot package.\n\nGetting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor <- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n\n\nWorking with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\nFeel free to change the method argument to other supported visual geometrics.\n\n\nWorking with layout\ncorrplor() supports three layout types, namely: \"full\", \"upper\" or \"lower\". The default is \"full\" which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them.\n\n\nWorking with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n\nCombining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\nReorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. \"original\"). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n\"AOE\" is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n\"FPC\" for the first principal component order.\n\"hclust\" for hierarchical clustering order, and \"hclust.method\" for the agglomeration method to be used.\n\n\"hclust.method\" should be one of \"ward\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\" or \"centroid\".\n\n\"alphabet\" for alphabetical order.\n\n\"AOE\", \"FPC\", \"hclust\", \"alphabet\". More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\nReordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex05.2.html#reference",
    "title": "Hands-on Exercise 05.2",
    "section": "Reference",
    "text": "Reference\nMichael Friendly (2002). \"Corrgrams: Exploratory displays for correlation matrices\". The American Statistician, 56, 316–324.\nD.J. Murdoch, E.D. Chow (1996). \"A graphical display of large correlation matrices\". The American Statistician, 50, 178–180.\n\nR packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.3.html",
    "href": "Hands-on_Ex/Hands-on_Ex05.3.html",
    "title": "Hands-on Exercise 05.3",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.3.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05.3.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 05.3",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\nBefore you get started, you are required:\n\nto start a new R project, and\nto create a new R Markdown document.\n\nNext, you will use the code chunk below to install and launch seriation, heatmaply, dendextend and tidyverse in RStudio.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.3.html#importing-and-preparing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05.3.html#importing-and-preparing-the-data-set",
    "title": "Hands-on Exercise 05.3",
    "section": "Importing and Preparing The Data Set",
    "text": "Importing and Preparing The Data Set\nIn this hands-on exercise, the data of World Happines 2018 report will be used. The data set is downloaded from here. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\n\nImporting the data set\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe output tibbled data frame is called wh.\n\n\nPreparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) <- wh$Country\n\nWarning: Setting row names on a tibble is deprecated.\n\n\nNotice that the row number has been replaced into the country name.\n\n\nTransforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.3.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05.3.html#static-heatmap",
    "title": "Hands-on Exercise 05.3",
    "section": "Static Heatmap",
    "text": "Static Heatmap\nThere are many R packages and functions can be used to drawing static heatmaps, they are:\n\nheatmap()of R stats package. It draws a simple heatmap.\nheatmap.2() of gplots R package. It draws an enhanced heatmap compared to the R base function.\npheatmap() of pheatmap R package. pheatmap package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.\nComplexHeatmap package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available here.\nsuperheat package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types. The full reference guide of the package is available here.\n\nIn this section, you will learn how to plot static heatmaps by using heatmap() of R Stats package.\n\nheatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\nNote:\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap <- heatmap(wh_matrix)\n\n\n\n\nNote:\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column-wise.\n\nwh_heatmap <- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.3.html#creating-interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05.3.html#creating-interactive-heatmap",
    "title": "Hands-on Exercise 05.3",
    "section": "Creating Interactive Heatmap",
    "text": "Creating Interactive Heatmap\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nBefore we get started, you should review the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package. You are also required to have the user manualof the package handy with you for reference purposes.\nIn this section, you will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\nWorking with heatmaply\n\nheatmaply(mtcars)\n\nWarning in doTryCatch(return(expr), name, parentenv, handler): unable to load shared object '/Library/Frameworks/R.framework/Resources/modules//R_X11.so':\n  dlopen(/Library/Frameworks/R.framework/Resources/modules//R_X11.so, 0x0006): Library not loaded: /opt/X11/lib/libSM.6.dylib\n  Referenced from: <05451E21-B5F6-3B2F-9C0F-3EA08D57DC34> /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/modules/R_X11.so\n  Reason: tried: '/opt/X11/lib/libSM.6.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OS/opt/X11/lib/libSM.6.dylib' (no such file), '/opt/X11/lib/libSM.6.dylib' (no such file), '/Library/Frameworks/R.framework/Resources/lib/libSM.6.dylib' (no such file), '/Library/Java/JavaVirtualMachines/jdk-17.0.1+12/Contents/Home/lib/server/libSM.6.dylib' (no such file)\n\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.3.html#data-trasformation",
    "href": "Hands-on_Ex/Hands-on_Ex05.3.html#data-trasformation",
    "title": "Hands-on Exercise 05.3",
    "section": "Data trasformation",
    "text": "Data trasformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables' values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\nScaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\n\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nNormalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable's distribution while making them easily comparable on the same \"scale\".\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\nPercentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nClustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options \"pearson\", \"spearman\" and \"kendall\" can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in \"euclidean\" to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is \"dist\"\" hence this can be one of \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\" or \"minkowski\".\nhclust_method default is NULL, which results in \"complete\" method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\" (= UPGMA), \"mcquitty\" (= WPGMA), \"median\" (= WPGMC) or \"centroid\" (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\nManual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with \"Euclidean distance\" and \"ward.D\" method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nStatistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that \"average\" method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust <- hclust(wh_d, method = \"average\")\nnum_k <- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\n5.4 Seriation\nOne of the problems with hierarchical clustering is that it doesn't actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can't end up between A and B, but it doesn't tell you which way to flip the A+B cluster. It doesn't tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is \"OLO\" (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is \"GW\" (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\nRegistered S3 method overwritten by 'gclus':\n  method         from     \n  reorder.hclust seriation\n\n\n\n\n\n\nThe option \"mean\" gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option \"none\" gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\nWorking with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.3.html#the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex05.3.html#the-finishing-touch",
    "title": "Hands-on Exercise 05.3",
    "section": "The finishing touch",
    "text": "The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.4.html",
    "href": "Hands-on_Ex/Hands-on_Ex05.4.html",
    "title": "Hands-on Exercise 05.3",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), \"This certainly isn't a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn't in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.\" For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package.\n\n\n\nFor this exercise, the GGally, parcoords, parallelPlot and tidyverse packages will be used.\nThe code chunks below are used to install and load the packages in R.\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\n\nIn this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called WHData-2018.csv.\nIn the code chunk below, read_csv() of readr package is used to import WHData-2018.csv into R and save it into a tibble data frame object called wh.\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.4.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05.4.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on Exercise 05.3",
    "section": "Plotting Static Parallel Coordinates Plot",
    "text": "Plotting Static Parallel Coordinates Plot\nIn this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\nPlotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.\n\n\nPlotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\n\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.\n\n\n\nParallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.\n\n\nRotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.\n\n\n\nAdjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme's text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.4.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "href": "Hands-on_Ex/Hands-on_Ex05.4.html#plotting-interactive-parallel-coordinates-plot-parallelplot-methods",
    "title": "Hands-on Exercise 05.3",
    "section": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods",
    "text": "Plotting Interactive Parallel Coordinates Plot: parallelPlot methods\nparallelPlot is an R package specially designed to plot a parallel coordinates plot by using 'htmlwidgets' package and d3.js. In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.\n\nThe basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh <- wh %>%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.\n\n\nRotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.\n\n\nChanging the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nParallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility <- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05.4.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex05.4.html#references",
    "title": "Hands-on Exercise 05.3",
    "section": "References",
    "text": "References\n\nggparcoord() of GGally package\nparcoords user guide\nparallelPlot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\nThe chunk code on the right will do the trick.\n\n\npacman::p_load(tidyverse, patchwork, \n               ggthemes, hrbrthemes,\n               ggrepel) \n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-annotation",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-annotation",
    "title": "Hands-on Exercise 02",
    "section": "Beyond ggplot2 Annotation",
    "text": "Beyond ggplot2 Annotation\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nWorking with ggrepel\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right. We simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 02",
    "section": "Beyond ggplot2 Themes",
    "text": "Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +  \n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\nWorking with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more.\n\n\n\nWorking with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, \n              base_size = 15, \n              grid = \"Y\") \n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk below?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-facet",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#beyond-ggplot2-facet",
    "title": "Hands-on Exercise 02",
    "section": "Beyond ggplot2 facet",
    "text": "Beyond ggplot2 facet\nIn this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics.\n\np1 <- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 <- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 <- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\nCreating Composite Graphics: pathwork methods\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, I am going to shared with you patchwork.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines: - Two-Column Layout using the Plus Sign +. - Parenthesis () to create a subplot group. - Two-Row Layout using the Division Sign \\\n\n\n\nWorking with patchwork\n\np1 + p2 / p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nwill place the plots beside each other, while / will stack them.\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\npatchwork also provides auto-tagging capabilities, in order to identify subplots in text:\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 02",
    "section": "Reference",
    "text": "Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create:\n\ninteractive data visualisation by using ggiraph and plotlyr packages,\nanimated data visualisation by using gganimate and plotlyr packages.\nVisualising univariate data with large number of categories by using rPackedBar package.\n\nAt the same time, you will also learn how to:\n\nreshape data by using tidyr package, and\nprocess, wrangle and transform data by using dplyr package.\n\n\nGetting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for compising multiple plots.\n\n\npacman::p_load(ggiraph, plotly, gganimate, DT, tidyverse, patchwork, gapminder, rPackedBar, ggplot2, gifski, av, magick)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on Exercise 02",
    "section": "Importing Data",
    "text": "Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 02",
    "section": "Interactive Data Visualisation - ggiraph methods",
    "text": "Interactive Data Visualisation - ggiraph methods\n\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nTooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\nComparing ggplot2 and ggiraph codes\nThe original ggplot2 code chunk.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5, \n               dotsize = 0.5) +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n\n\n\n\nThe ggiraph code chunk.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              #<<\n    aes(tooltip = ID),                   #<<\n    stackgroups = TRUE,                  #<<\n    binwidth = 1,                        #<<\n    method = \"histodot\") +               #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  #<<\n  ggobj = p,                             #<<\n  width_svg = 6,                         #<<\n  height_svg = 6*0.618                   #<<   \n)                                        #<<\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\nDisplaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip <- c(paste0(     #<<\n  \"Name = \", exam_data$ID,         #<<\n  \"\\n Class = \", exam_data$CLASS)) #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), #<<\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\nCustomising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<<\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #<<\n    opts_tooltip(    #<<\n      css = tooltip_css)) #<<\n)                                        \n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\nDisplaying statistics on tooltip\n\ntooltip <- function(y, ymax, accuracy = .01) {   #<<\n  mean <- scales::number(y, accuracy = accuracy) #<<\n  sem <- scales::number(ymax - y, accuracy = accuracy) #<<\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem) #<<\n} #<<\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  #<<\n                     tooltip(y, ymax))),  #<<\n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  #<<\n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\nCode chunk on the left shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\nHover effect with data_id aesthetic\nCode chunk below show the second interactive feature of ggiraph, namely data_id.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             #<<\n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\nStyling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        #<<\n    opts_hover(css = \"fill: #202020;\"),  #<<\n    opts_hover_inv(css = \"opacity:0.2;\") #<<\n  )                                      #<<  \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from Slide 9, in this example the ccs customisation request are encoded directly.\n\n\nCombining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, #<<\n        data_id = CLASS),#<<              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\nClick effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on ther web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              #<<\n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\nCoordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation on the right.\n\nwhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\nIn order to build a coordinated multiple views, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + #<<\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 / p2), #<<\n       width_svg = 6,\n       height_svg = 6,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 02",
    "section": "Interactive Data Visualisation - plotly methods!",
    "text": "Interactive Data Visualisation - plotly methods!\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics.\nDifferent from other plotly platform, plot.R is free and open source.\n\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\nCreating an interactive scatter plot: plot_ly() method\nThe code chunk below plots an interactive scatter plot by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\nWorking with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE) #<<\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\nChanging colour pallete: plot_ly() method\nIn the code chunk below, colors argument is used to change the default colour palette to ColorBrewel colour palette.\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = \"Set1\") #<<\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\nCustomising colour scheme: plot_ly() method\nIn the code chunk below, a customised colour scheme is created. Then, colors argument is used to change the default colour palette to the customised colour scheme.\n\npal <- c(\"red\", \"purple\", \"blue\", \"green\") #<<\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE, \n        colors = pal) #<<\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\nCustomising tooltip: plot_ly() method\nIn the code chunk below, text argument is used to change the default tooltip.\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     #<<\n                      \"<br>Class:\", CLASS),  #<<\n        color = ~RACE, \n        colors = \"Set1\")\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\nWorking with layout: plot_ly() method\nIn the code chunk below, layout argument is used to change the default tooltip.\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS,\n        text = ~paste(\"Student ID:\", ID,     \n                      \"<br>Class:\", CLASS),  \n        color = ~RACE, \n        colors = \"Set1\") %>%\n  layout(title = 'English Score versus Maths Score ', #<<\n         xaxis = list(range = c(0, 100)),             #<<\n         yaxis = list(range = c(0, 100)))             #<<\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\nTo learn more about layout, visit this link.\nInteractive:\n\nClick on the colour symbol at the legend.\n\n\n\nCreating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nWarning in geom_point(dotsize = 1): Ignoring unknown parameters: `dotsize`\n\nggplotly(p) #<<\n\n\n\n\n\nNotice that the only extra line you need to include in the code chunk is ggplotly().\n\n\nCoordinated Multiple Views with plotly\nCode chunk below plots two scatterplots and places them next to each other side-by-side by using subplot() of plotly package.\n\np1 <- ggplot(data=exam_data, \n              aes(x = MATHS,\n                  y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nsubplot(ggplotly(p1), \n        ggplotly(p2))\n\n\n\n\n\n\nd <- highlight_key(exam_data)  #<<\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 02",
    "section": "Interactive Data Visualisation - crosstalk methods!",
    "text": "Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\nInteractive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 02",
    "section": "Animated Data Visualisation: gganimate methods",
    "text": "Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nGetting started\nAdd the following packages in the packages list:\n\ngganimate: An ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\n\n\n\nImporting the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- readxl::read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\nWarning: `mutate_each_()` was deprecated in dplyr 0.7.0.\nℹ Please use `across()` instead.\n\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nBuilding a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\nBuilding the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       #<<\n  ease_aes('linear')            #<<"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03.html#visualizing-large-data-interactively",
    "href": "Hands-on_Ex/Hands-on_Ex03.html#visualizing-large-data-interactively",
    "title": "Hands-on Exercise 02",
    "section": "Visualizing Large Data Interactively",
    "text": "Visualizing Large Data Interactively\nIn this hands-on exercise you will learn how to visualise large data by using packed bar methods. For the purpose of this hands-on exercise, two data sets will be used. They are:\n\nGDP.csv provides GDP, GDP per capita and GDP PPP data for world countries from 2000 to 2020. The data was extracted from World Development Indicators Database of World Bank.\nWorldCountry.csv provides a list of country names and the continent they belong to extracted from Statistics Times.\nWrite a code chunk to import both data sets by using read_csv() of readr package.\n\nThe solution:\n\nGDP <- read_csv(\"data/GDP.csv\")\n\nRows: 648 Columns: 25\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (25): Country Name, Country Code, Series Name, Series Code, 2000, 2001, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nWorldCountry <- read_csv(\"data/WorldCountry.csv\")\n\nRows: 250 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Country or Area, ISO-alpha3 Code, Region 1, Region 2, Continent\ndbl (2): No, M49 Code\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nData preparetion\nBefore programming the data visualisation, it is important for us to reshape, wrangle and transform the raw data to meet the data visualisation need.\nCode chunk below performs following tasks:\n\nmutate() of dplyr package is used to convert all values in the 202 field into numeric data type.\nselect() of dplyr package is used to extract column 1 to 3 and Values field.\npivot_wider() of tidyr package is used to split the values in Series Name field into columns.\nleft_join() of dplyr package is used to perform a left-join by using Country Code of GDP_selected and ISO-alpha3 Code of WorldCountry tibble data tables as unique identifier.\n\n\nGDP_selected <- GDP %>%\n  mutate(Values = as.numeric(`2020`)) %>%\n  select(1:3, Values) %>%\n  pivot_wider(names_from = `Series Name`,\n              values_from = `Values`) %>%\n  left_join(y=WorldCountry, by = c(\"Country Code\" = \"ISO-alpha3 Code\"))\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\n\n\n\nIntroducing packed bar method\n\npacked bar is a relatively new data visualisation method introduced by Xan Gregg from JMP.\n\nIt aims to support the need of visualising skewed data over hundreds of categories.\n\nThe idea is to support the Focus+Context data visualization principle.\nVisit this JMP Blog to learn more about the design principles of packed bar.\n\n\n\nData Preparation\nAs usual, we need to prepare the data before building the packed bar. Prepare the data by using the code chunk below.\n\nGDP_selected <- GDP %>%\n  mutate(GDP = as.numeric(`2020`)) %>%\n  filter(`Series Name` == \"GDP (current US$)\") %>%\n  select(1:2, GDP) %>%\n  na.omit()\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\n\n\n\nThing to learn from the code chunk above\n\nna.omit() is used to exclude rows with missing values. This is because rPackedBar package does not support missing values.\n\n\n\n\nBuilding a packed bar by using rPackedBar package.\nIn the code chunk below, plotly_packed_bar() of rPackedBar package is used to create an interactive packed bar.\n\np = plotly_packed_bar(\n  input_data = GDP_selected,\n  label_column = \"Country Name\",\n  value_column = \"GDP\",\n  number_rows = 10,\n  plot_title = \"Top 10 countries by GDP, 2020\",\n  xaxis_label = \"GDP (US$)\",\n  hover_label = \"GDP\",\n  min_label_width = 0.018,\n  color_bar_color = \"#00aced\",\n  label_color = \"white\")\nplotly::config(p, displayModeBar = FALSE)\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03.html#reference",
    "title": "Hands-on Exercise 02",
    "section": "Reference",
    "text": "Reference\n\nggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\n\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\nplotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels\n\n\n\nPacked Bar\nrPackedBar: Packed Bar Charts with ‘plotly’\n\nVisualizing Twitter Data with a Packed Barchart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\n\n\n\n\ndplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges.\ntidyr helps R users to create tidy data.\nstringr provides a cohesive set of functions designed to make working with strings as easy as possible.\nforcats provides a suite of tools that solve common problems with factors, including changing the order of levels or the values.\n\n\n\nreadr provides a fast and friendly way to read rectangular data (like csv, tsv, and fwf).\ntibble is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not.\nggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics.\npurrr enhances R’s functional programming (FP) toolkit by providing a complete and consistent set of tools for working with functions and vectors.\n\n\n\n\n\nReference: Introduction to the Tidyverse: How to be a tidy data scientist.\n\n\n\n\n\nBefore we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.\n\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk on the right assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\nreadr is one of the tidyverse package.\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 01",
    "section": "Introducing ggplot",
    "text": "Introducing ggplot\n\nAn R package for declaratively creating data-driven graphics based on The Grammar of Graphics\nIt is part of the tidyverse family specially designed for visual exploration and communication.\nFor more detail, visit ggplot2 link.\n\n\n\nR Graphics VS ggplot\n\nR Graphics\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\nggplot2\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\nThen, why ggplot2\n\n\n\n\n\n\nNote\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\nHadley Wickham\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\nGrammar of Graphics\n\nWilkinson, L. (1999) Grammar of Graphics, Springer.\nThe grammar of graphics is an answer to a question:\n\n\nWhat is a statistical graphic?\n\nGrammar of graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nTwo principles\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\n\n\n\nA good grammar will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978).\nA grammar provides a strong foundation for understanding a diverse range of graphics.\nA grammar may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\n\n\nEssential Grammatical Elements in ggplot2\nA Layered Grammar of Graphics\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\n\nThe ggplot() function and data argument\n\nLet us call the ggplot() function using the code chunk on the right.\nNotice that a blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\nggplot(data=exam_data)\n\n\n\n\n\n\nThe Aesthetic mappings\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency.\nEach visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\n\n\n\nWorking with aes()\n\nThe code chunk on the right add the aesthetic element into the plot.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\nNotice that ggplot includes the x-axis and the axis’s label.\n\n\n\nGeometric Objects: geom\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\nGeometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nGeometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\nGeometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30.\n\n\n\n\nModifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\nModifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\nGeometric Objects: geom-density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nReference: Kernel density estimation\nThe code chunk below plots two kernel density lines by using color or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\nGeometric Objects: geom_boxplot\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().]\n\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\nReference: Notched Box Plots.\n\n\ngeom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +              #<<      \n  geom_point(position=\"jitter\", #<<\n             size = 0.5)        #<<\n\n\n\n\n\n\nGeometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\nGeometric Objects: geom_violin() and geom_boxplot()\nThe code chunk below combined a violin plot and a boxplot to show the distribution of Maths scores by gender.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin(fill=\"light blue\") +\n  geom_boxplot(alpha=0.5)           \n\n\n\n\n\n\nGeometric Objects: geom_point()\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\nStatistics, stat\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nWorking with stat\n\nThe boxplots on the right are incomplete because the positions of the means were not shown.\nNext two slides will show you how to add the mean values on the boxplots.\n\n\n\n\nWorking with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\nWorking with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\nHow to add a best fit curve on a scatterplot?\n\nThe scatterplot on the right shows the relationship of Maths and English grades of pupils.\nThe interpretability of this graph can be improved by adding a best fit curve.\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nThe default method used is loess.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nFacets\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.\nFacets are an alternative to aesthetics for displaying additional discrete variables.\nggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\n\nfacet_wrap()\n\nfacet_wrap wraps a 1d sequence of panels into 2d.\nThis is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\n\n\nWorking with facet_wrap()\nThe code chunk below plots a trellis plot using facet-wrap().\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\nfacet_grid() function\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables.\nIt is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\n\n\nWorking with facet_grid()\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\nWorking with facet\n\n\n\n\n\n\nNote\n\n\n\nPlot a trellis boxplot looks similar to the figure below.\n\n\n\nThe solution:\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= CLASS)) +\n  geom_boxplot() +\n  facet_grid(~ GENDER)\n\n\n\n\n\n\n\nWorking with facet\n\n\n\n\n\n\nNote\n\n\n\nPlot a trellis boxplot looks similar to the figure below.\n\n\n\nThe solution:\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= CLASS)) +\n  geom_boxplot() +\n  facet_grid(GENDER ~.)\n\n\n\n\n\n\n\nWorking with facet\n\n\n\n\n\n\nNote\n\n\n\nPlot a trellis boxplot looks similar to the figure below.\n\n\n\nThe solution:\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n    facet_grid(GENDER ~ CLASS)\n\n\n\n\n\n\n\nCoordinates\n\nThe Coordinates functions map the position of objects onto the plane of the plot.\nThere are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\n\n\nWorking with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\nHow to change to the y- and x-axis range?\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nThemes\n\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include:\n\ntheme_gray() (default)\ntheme_bw()\ntheme_classic()\n\nA list of theme can be found at this link.\nEach theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\n\nWorking with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlot a horizontal bar chart looks similar to the figure below.\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\n\n\n\nThe solution\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n  theme(panel.background = element_rect(\n    fill = \"lightblue\",\n    colour = \"lightblue\",\n    size = 0.5,\n    linetype = \"solid\"),\n    panel.grid.major = element_line(\n      size = 0.5,\n      linetype = 'solid',\n      colour = \"white\"), \n    panel.grid.minor = element_line(\n      size = 0.25,\n      linetype = 'solid',\n      colour = \"white\"))\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\nDesigning Data-drive Graphics for Analysis I\n\nThe original design\nA simple vertical bar chart for frequency analysis. Critics:\n\ny-aixs label is not clear (i.e. count)\nTo support effective comparison, the bars should be sorted by their resepctive frequencies.\nFor static graph, frequency values should be added to provide addition information.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWith reference to the critics on the earlier slide, create a makeover looks similar to the figure on the right.\n\n\n\nggplot(data=exam_data,\n       aes(x=reorder(RACE,RACE,\n                function(x)-length(x))))+\n  geom_bar() +\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\n\n\n\nThe makeover design\nThis code chunk uses fct_infreq() of forcats package.\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n  ggplot(aes(x = RACE)) + \n  geom_bar()+\n  ylim(0,220) +\n  geom_text(stat=\"count\", \n      aes(label=paste0(..count.., \", \", \n      round(..count../sum(..count..)*100,\n            1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of\\nPupils\") +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\nCredit: I learned this trick from Getting things into the right order of Prof. Claus O. Wilke, the author of Fundamentals of Data Visualization\n\n\n\nDesigning Data-drive Graphics for Analysis II\n\nThe original design\n\n\n\n\n\n\n\nNote\n\n\n\n\nAdding mean and median lines on the histogram plot.\nChange fill color and line color\n\n\n\nThe code chunk:\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(MATHS,\n                                 na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=1) +\n  geom_vline(aes(xintercept=median(MATHS,\n                                  na.rm=T)),\n             color=\"grey30\",\n             linetype=\"dashed\", \n             size=1)\n\n\n\n\n\n\n\nDesigning Data-drive Graphics for Analysis III\n\nThe original design\nThe histograms on the left are elegantly designed but not informative. This is because they only reveal the distribution of English scores by gender but without context such as all pupils.\n\n\n\n\n\n\n\nImportant\n\n\n\nCreate a makeover looks similar to the figure below. The background histograms show the distribution of English scores for all pupils.\n\n\n\nThe code chunk\n\nd <- exam_data   \nd_bg <- d[, -3]  \n\nggplot(d, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = d_bg, fill = \"grey\", alpha = .5) +\n  geom_histogram(colour = \"black\") +\n  facet_wrap(~ GENDER) +\n  guides(fill = FALSE) +  \n  theme_bw()\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nDesigning Data-drive Graphics for Analysis IV\n\nThe original design.\n\n\n\n\n\n\n\nImportant\n\n\n\nCreate a makeover looks similar to the figure on the right.\n\n\nA within group scatterplot with reference lines.\n\nggplot(data=exam_data, \n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  geom_hline(yintercept=50,\n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1) + \n  geom_vline(xintercept=50, \n             linetype=\"dashed\",\n             color=\"grey60\",\n             size=1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 01",
    "section": "Reference",
    "text": "Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 - Visual Analytics and Applications",
    "section": "",
    "text": "Hello there,\nThis is my Quarto/Netify Page, documenting my academic studies in the course ISSS608 - Visual Analytics and Applications.\nThis is a work in progress, keep track of the updates."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01.html",
    "title": "Data Visualization Makeover 01",
    "section": "",
    "text": "The objective is to create Age-Sex Pyramid Analytic Visualization to accurately describe the demographic of Singapore. It is a common visual representation to contrast and sub sect the population based on different classifiers, commonly by gender and age. To further illustrate the visualization, multiple Age-Sex Pyramids will be plotted by planning area using the trellis display. \nThe visualization is created using the Singapore Residents by Planning Area / Sub-zone, Age Group, Sex and Type of Dwelling, June 2022 (Singstat)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#data-cleaning-and-preparation",
    "href": "Take-home_Ex/Take-home_Ex01.html#data-cleaning-and-preparation",
    "title": "Data Visualization Makeover 01",
    "section": "Data Cleaning and Preparation",
    "text": "Data Cleaning and Preparation\nTo ensure that the data is properly loaded and read, the following actions will be done in the raw excel file and tableau. \n\n\n\n\n\n\n\nACTION\nIMAGE\n\n\nFrom the raw excel file, remove the unnecessary rows as not to confuse the tableau reading\n\n\n\nLink the three sheets with the following identifiers:\n\nPlanning Area\nSubzone\nAge Group\nType of Dwelling\n\nRename 2022 as population (either total, male, female)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#original-visualization",
    "href": "Take-home_Ex/Take-home_Ex01.html#original-visualization",
    "title": "Data Visualization Makeover 01",
    "section": "Original Visualization",
    "text": "Original Visualization\nTrellis Display is a visualization framework aimed at easily presenting visual data in tables and box subdivided by category. The aim is to be able to compare and contrast the data based on the category in one window. \n\n\n\n\n\nThough the original visualization is a trellis display, there are some issues on the clarity, aesthetics, and interactive design of the original data visualization to be explained at the next section."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#visualization-critique",
    "href": "Take-home_Ex/Take-home_Ex01.html#visualization-critique",
    "title": "Data Visualization Makeover 01",
    "section": "Visualization Critique",
    "text": "Visualization Critique\nThe issues of the original visualization are as follows: \n\nClarity\n\na. Lack of Header and Titles\nThere is no title to explain the context of the visual. Users would not know the message of the visual at first glance. While an age sex pyramid is a common visual tool to indicate a split in gender population, it is not clear which population is being discussed unless the user is aware of the Planning Areas. Furthermore, though indicated as 2022 at the x-axis, it would have been clearer if it is included in the header or title. A simple title such as 2022 Singapore Age – Sex Pyramid would be enough to communicate the topic of the visual.\n\n\nb. Lack of Color Labels\nThe color of the back-to-back horizontal bar chart is the same between male and female values. This may confuse users as it may give the wrong impression that both bars may belong to a single elongated bar. It is proposed that color for both male and female to be separate and distinct, even if in the terms of different shade. \n\n\n\nAesthetic\n\nc. Poor Layout\nThe Trellis chart is organized horizontally and side by side and as such is visually difficult to read as there is an estimated 55 Planning Areas to scroll from. This difficult extends also to comparing multiple charts as there is only so much that can be shown per plane. It is recommended to create a table like trellis chart with rows and columns as to ease visualization and maximize space. \n\n\nd. Lack of differentiating color per Area\nSimilar to the back to back horizontal bar, the color between planning areas are also the same. To improve aesthetic, it is recommended that Planning Areas will have the same color while male to female bars with share the same color but of different shades.\n\n\ne. Too many Age Groups\nThe is an overall 19 age gaps that extends the chart and limits the number of planes that can be shown per window. It is recommended to group together the different age groups from 5 years to 10 years thus reducing the y axis by half and increase the number of charts that can be seen in one viewing. \n\n\n\nInteractive\nThere is an opportunity to create filters to limit and focus the dashboard to a select Area, Subzone and Dwelling Type. This opportunity can allow for a more interactive and dynamic analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#proposed-design-of-trellis-chart",
    "href": "Take-home_Ex/Take-home_Ex01.html#proposed-design-of-trellis-chart",
    "title": "Data Visualization Makeover 01",
    "section": "Proposed Design of Trellis Chart",
    "text": "Proposed Design of Trellis Chart\n\n\n\n\n\n\nClarity\n\na. Proper Titles and Headers\nThe Age-Sex Pyramid Trellis Chart is titled correctly, indicating as 2022 Singapore Age-Sex Pyramid per Area. Furthermore, each Age-Sex Pyramid is labeled per Planning Area at the bottom right-hand corner of each plane. These labels ensure that users can properly read and identify the overall message of the chart and category of each individual pyramid. \nIt may be recommended to add value labels per bar to textually visualize the amount each chart, yet this step can be avoid as the chart allows for pop out labels and values to appear when hovering over the chart. Furthermore, on the design aspect, value labels will clutter the chart and cause it to be overly noisy. \n\n\nb. Differentiated Color Labels\nMale-Female bar colors are identified with different shades with the lighter colors indicating male and darker as female. This ensures visual differentiation between genders with ensuring some similarity within planning area.\n\n\n\nAesthetic\n\nc. 3 Column Tabular Trellis Chart\nThe Trellis Chart is organized to 3 columns to ensure that the pyramids are visually maximized both in terms of the number of pyramid charts in one viewing and the max value of the y-axis for the bars to be visually district.\n\n\nd. Differentiating Color per Area\nColors per Planning Area is colored differently to ensure distinct differentiation per pyramid. \n\n\ne. Simplified Age Groups\n19 age groups are reduced to 10 age groups to visually maximize the space of the plane without oversimplifying the data points. \n\n\n\nInteractive\nThe Trellis Chart can be filtered per Planning Area, Subzone and Type of Dwelling. This ensures interactive use of the chart and allow for more drilled down analysis of the data. Though there is a limitation as this chart cannot compare Subzones within the same Planning Area as can be an improvement for future developments."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#process-and-development",
    "href": "Take-home_Ex/Take-home_Ex01.html#process-and-development",
    "title": "Data Visualization Makeover 01",
    "section": "Process and Development",
    "text": "Process and Development\n\n\n\n\n\n\n\nACTION\nIMAGE\n\n\n\n\nTo create the Trellis Chart, the table must be created first determining the number of columns, indicated in the parameter - # of Col\n\n\n\nNext is to define the rows and columns field with the following formula:\n\nIndex – Index ()\nColumn – [Index]%[# of Col]\nRows – int(([Index]-1)/[# of Col])\n\nThen place the calculated values at the column and row fields\n\n\n\nTo ensure that the values are not inflated due to the addition of the Total category, recreate the set of the following dimensions by excluding the Total and HDB Total (for Type of Dwelling)\n\nPlanning Area\nSubzone\nType of Dwelling\n\n\n\n\nBuild the Trellis Chart with multiple Age-Sex Pyramid with the correct filters\n*remember to set the colors base on the gender and planning area\n\n\n\nCreate a 0 mark parameter to as a line with Planning Area as the label. Set the 0 mark as a dual axis and make the line transparent to set the Planning Area label"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01.html#dashboard-overview",
    "href": "Take-home_Ex/Take-home_Ex01.html#dashboard-overview",
    "title": "Data Visualization Makeover 01",
    "section": "Dashboard Overview",
    "text": "Dashboard Overview\nBesides the Trellis Chart, additional charts are created as well to build a better interactive dashboard. Page 1 of the dashboard is to give an overview of Singapore 2022 population while Page 2 presents the Trellis Chart and Age-Sex Pyramids per Planning Area. \n\n\n\nPage 1\nPage 2\n\n\n\n\n\n\n\n\n\n\nMajor Findings\n\nOverall, Singapore has more females than males by est. 500,000 heavily contributed by the adult (25 and above) age group. Male population is 11 million while Female is 11.5 million. This is a stark contrast from previous years as there are more males in Singapore than females, average ratio at 53% male and 47% female. The shift in population shares maybe due to migration and the impact of COVID lockdown as male manpower migrating to the city state decreased during COVID and has not recovered since. \nMale and Female distribution per Planning Area and age group are almost equal except for the senior population. The close distribution maybe due to the equal economic opportunity for both genders in Singapore. Furthermore, top areas that are heavily populated by males are populated by females as well. \nThe data may be incomplete as 26 out of 55 (48%) of Total Planning Area have either no data or negligible data. This is evident that some area’s population data is missing and is not only limited to far east and far west areas such as Tuas, but high population city center such as Orchard has no data recorded as well. \n\nDashboard Link: https://public.tableau.com/views/DataVizMakeover01_16743910439700/TotalSingapore?:language=en-US&publish=yes&:display_count=n&:origin=viz_share_link"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03.html",
    "title": "Data Visualization Makeover 03",
    "section": "",
    "text": "The objective of this exercise is to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques and apply appropriate interactive techniques to enhance user and data discovery experiences.\nThe visualization is created using the Resale flat princes based on registration date from Jan-2017 onwards (Data.gov.sg).\n\n\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. You can choose to focus on either one housing type or multiple housing types. The study period should be on 2022."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03.html#getting-started---data-loading-and-processing",
    "href": "Take-home_Ex/Take-home_Ex03.html#getting-started---data-loading-and-processing",
    "title": "Data Visualization Makeover 03",
    "section": "Getting Started - Data Loading and Processing",
    "text": "Getting Started - Data Loading and Processing\n\nInstalling and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed.\n\npacman::p_load(tidyverse, ggplot2, knitr, plotly, skimr, questionr, funModeling, sf, tmap, quanteda, NLP, ggiraph, ggstatsplot, dplyr, crosstalk, DT, ggdist, gganimate, ggpubr)\n\n\n\nImporting Data\nThis code chunk is to import the data from resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv file to the Quarto/R page.\n\ntotal_flat_data <- read_csv(\"data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\nRows: 146429 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): month, town, flat_type, block, street_name, storey_range, flat_mode...\ndbl (3): floor_area_sqm, lease_commence_date, resale_price\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nFiltering the Dataset\nThis section deals with limiting the data to the following criteria:\n\nThe year should be 2022\nThe flat_type should be only 3-ROOM, 4-ROOM and 5-ROOM\n\n\n\n\n\n\n\nNote\n\n\n\nThis code uses the dplyr package to filter out the rows with year 2022 and correct flat type\n\n\n\nfilter_flat_data <- filter(total_flat_data, grepl('2022', month) & flat_type %in% c(\"3 ROOM\", \"4 ROOM\",\"5 ROOM\"))\n\nfilter_flat_data\n\n# A tibble: 24,374 × 11\n   month   town    flat_…¹ block stree…² store…³ floor…⁴ flat_…⁵ lease…⁶ remai…⁷\n   <chr>   <chr>   <chr>   <chr> <chr>   <chr>     <dbl> <chr>     <dbl> <chr>  \n 1 2022-01 ANG MO… 3 ROOM  320   ANG MO… 07 TO …      73 New Ge…    1977 54 yea…\n 2 2022-01 ANG MO… 3 ROOM  225   ANG MO… 07 TO …      67 New Ge…    1978 55 yea…\n 3 2022-01 ANG MO… 3 ROOM  331   ANG MO… 07 TO …      68 New Ge…    1981 58 yea…\n 4 2022-01 ANG MO… 3 ROOM  534   ANG MO… 07 TO …      82 New Ge…    1980 57 yea…\n 5 2022-01 ANG MO… 3 ROOM  578   ANG MO… 04 TO …      67 New Ge…    1980 57 yea…\n 6 2022-01 ANG MO… 3 ROOM  452   ANG MO… 01 TO …      83 New Ge…    1979 56 yea…\n 7 2022-01 ANG MO… 3 ROOM  560   ANG MO… 01 TO …      67 New Ge…    1980 57 yea…\n 8 2022-01 ANG MO… 3 ROOM  435   ANG MO… 04 TO …      67 New Ge…    1979 56 yea…\n 9 2022-01 ANG MO… 3 ROOM  435   ANG MO… 04 TO …      67 New Ge…    1979 56 yea…\n10 2022-01 ANG MO… 3 ROOM  560   ANG MO… 10 TO …      67 New Ge…    1980 57 yea…\n# … with 24,364 more rows, 1 more variable: resale_price <dbl>, and abbreviated\n#   variable names ¹​flat_type, ²​street_name, ³​storey_range, ⁴​floor_area_sqm,\n#   ⁵​flat_model, ⁶​lease_commence_date, ⁷​remaining_lease\n\n\n\n\nExploring the Data\nThis section of the code aims to ensure that the scope and limitation are followed and the data are listed correctly\n\nskimr::skim(filter_flat_data)\n\n\nData summary\n\n\nName\nfilter_flat_data\n\n\nNumber of rows\n24374\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmonth\n0\n1\n7\n7\n0\n12\n0\n\n\ntown\n0\n1\n5\n15\n0\n26\n0\n\n\nflat_type\n0\n1\n6\n6\n0\n3\n0\n\n\nblock\n0\n1\n1\n4\n0\n2457\n0\n\n\nstreet_name\n0\n1\n7\n20\n0\n552\n0\n\n\nstorey_range\n0\n1\n8\n8\n0\n17\n0\n\n\nflat_model\n0\n1\n4\n22\n0\n16\n0\n\n\nremaining_lease\n0\n1\n8\n18\n0\n638\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nfloor_area_sqm\n0\n1\n94.07\n19.32\n51\n81\n93\n110\n159\n▅▇▆▃▁\n\n\nlease_commence_date\n0\n1\n1997.46\n14.98\n1967\n1985\n1998\n2014\n2019\n▂▆▅▃▇\n\n\nresale_price\n0\n1\n536391.17\n157993.72\n200000\n428000\n515000\n610000\n1418000\n▅▇▂▁▁\n\n\n\n\n\n\nglimpse(filter_flat_data, 60)\n\nRows: 24,374\nColumns: 11\n$ month               <chr> \"2022-01\", \"2022-01\", \"2022-01…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"A…\n$ flat_type           <chr> \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", …\n$ block               <chr> \"320\", \"225\", \"331\", \"534\", \"5…\n$ street_name         <chr> \"ANG MO KIO AVE 1\", \"ANG MO KI…\n$ storey_range        <chr> \"07 TO 09\", \"07 TO 09\", \"07 TO…\n$ floor_area_sqm      <dbl> 73, 67, 68, 82, 67, 83, 67, 67…\n$ flat_model          <chr> \"New Generation\", \"New Generat…\n$ lease_commence_date <dbl> 1977, 1978, 1981, 1980, 1980, …\n$ remaining_lease     <chr> \"54 years 05 months\", \"55 year…\n$ resale_price        <dbl> 358000, 355000, 338000, 420000…\n\n\n\nunique(filter_flat_data$month)\n\n [1] \"2022-01\" \"2022-02\" \"2022-03\" \"2022-04\" \"2022-05\" \"2022-06\" \"2022-07\"\n [8] \"2022-08\" \"2022-09\" \"2022-10\" \"2022-11\" \"2022-12\"\n\n\n\nunique(filter_flat_data$flat_type)\n\n[1] \"3 ROOM\" \"4 ROOM\" \"5 ROOM\"\n\n\n\nunique(filter_flat_data$storey_range)\n\n [1] \"07 TO 09\" \"04 TO 06\" \"01 TO 03\" \"10 TO 12\" \"13 TO 15\" \"25 TO 27\"\n [7] \"16 TO 18\" \"19 TO 21\" \"22 TO 24\" \"28 TO 30\" \"34 TO 36\" \"31 TO 33\"\n[13] \"37 TO 39\" \"40 TO 42\" \"43 TO 45\" \"49 TO 51\" \"46 TO 48\"\n\n\n\n\n\n\n\n\nNote\n\n\n\n*storey_range is listed as a string and needed for the arrangement to be corrected moving foreward\n\n\n\nunique(filter_flat_data$floor_area_sqm)\n\n  [1]  73.0  67.0  68.0  82.0  83.0  75.0  74.0  60.0  81.0  92.0  99.0  93.0\n [13]  98.0 100.0  91.0 106.0  90.0  85.0 119.0 120.0 118.0 125.0 110.0 112.0\n [25]  69.0  59.0  70.0  66.0  65.0  88.0  94.0  95.0  87.0 104.0 103.0 107.0\n [37]  84.0 105.0 108.0 123.0 122.0 121.0 139.0 115.0 133.0 113.0 126.0  64.0\n [49] 116.0 114.0 111.0 130.0  77.0 102.0 117.0 101.0  96.0 149.0  62.0  63.0\n [61]  80.0 132.0  89.0 128.0  97.0 138.0  79.0 109.0 124.0 127.0 134.0 131.0\n [73]  57.0  56.0  61.0  52.0  72.0  58.0 129.0 136.0 140.0  53.0  76.0  86.0\n [85]  71.0 137.0 135.0 150.0  60.3  78.0  54.0 142.0  55.0 159.0 141.0 154.0\n [97]  63.1 144.0 155.0 157.0  51.0 152.0 143.0\n\n\n\nunique(filter_flat_data$remaining_lease)\n\n  [1] \"54 years 05 months\" \"55 years 01 month\"  \"58 years\"          \n  [4] \"57 years 02 months\" \"57 years 01 month\"  \"56 years 07 months\"\n  [7] \"56 years 01 month\"  \"56 years 05 months\" \"61 years 09 months\"\n [10] \"57 years\"           \"56 years 06 months\" \"54 years 04 months\"\n [13] \"55 years 10 months\" \"54 years 03 months\" \"54 years 09 months\"\n [16] \"55 years 09 months\" \"56 years\"           \"55 years 05 months\"\n [19] \"58 years 04 months\" \"63 years 01 month\"  \"62 years\"          \n [22] \"63 years\"           \"57 years 06 months\" \"58 years 03 months\"\n [25] \"57 years 08 months\" \"57 years 05 months\" \"56 years 08 months\"\n [28] \"56 years 04 months\" \"58 years 01 month\"  \"59 years 01 month\" \n [31] \"57 years 11 months\" \"57 years 07 months\" \"70 years 04 months\"\n [34] \"95 years 05 months\" \"83 years 04 months\" \"80 years 01 month\" \n [37] \"78 years 09 months\" \"79 years\"           \"88 years 08 months\"\n [40] \"87 years 05 months\" \"55 years 11 months\" \"56 years 09 months\"\n [43] \"54 years 07 months\" \"55 years 04 months\" \"63 years 03 months\"\n [46] \"55 years 03 months\" \"59 years 08 months\" \"58 years 07 months\"\n [49] \"63 years 02 months\" \"62 years 08 months\" \"64 years\"          \n [52] \"59 years 07 months\" \"59 years 06 months\" \"53 years 01 month\" \n [55] \"55 years 08 months\" \"55 years\"           \"60 years 04 months\"\n [58] \"93 years 11 months\" \"49 years 07 months\" \"57 years 04 months\"\n [61] \"57 years 03 months\" \"83 years\"           \"82 years 11 months\"\n [64] \"91 years 10 months\" \"91 years 08 months\" \"62 years 09 months\"\n [67] \"62 years 07 months\" \"64 years 03 months\" \"78 years\"          \n [70] \"62 years 04 months\" \"62 years 03 months\" \"62 years 02 months\"\n [73] \"54 years 08 months\" \"52 years 01 month\"  \"60 years 07 months\"\n [76] \"61 years\"           \"62 years 05 months\" \"73 years 11 months\"\n [79] \"91 years 09 months\" \"64 years 02 months\" \"60 years 01 month\" \n [82] \"59 years 05 months\" \"61 years 08 months\" \"62 years 06 months\"\n [85] \"70 years 05 months\" \"93 years 10 months\" \"66 years 04 months\"\n [88] \"62 years 11 months\" \"65 years 01 month\"  \"61 years 11 months\"\n [91] \"50 years 11 months\" \"50 years 09 months\" \"50 years 10 months\"\n [94] \"64 years 08 months\" \"65 years\"           \"69 years 08 months\"\n [97] \"69 years 07 months\" \"69 years 05 months\" \"69 years 04 months\"\n[100] \"75 years 06 months\" \"67 years 01 month\"  \"51 years 07 months\"\n[103] \"64 years 10 months\" \"65 years 07 months\" \"64 years 05 months\"\n[106] \"64 years 01 month\"  \"64 years 07 months\" \"63 years 06 months\"\n[109] \"67 years 02 months\" \"62 years 01 month\"  \"62 years 10 months\"\n[112] \"95 years 03 months\" \"65 years 04 months\" \"63 years 04 months\"\n[115] \"65 years 06 months\" \"63 years 08 months\" \"64 years 11 months\"\n[118] \"94 years 07 months\" \"61 years 07 months\" \"94 years 06 months\"\n[121] \"74 years 05 months\" \"75 years 02 months\" \"75 years 07 months\"\n[124] \"63 years 10 months\" \"64 years 06 months\" \"65 years 09 months\"\n[127] \"82 years 02 months\" \"81 years 09 months\" \"80 years 10 months\"\n[130] \"72 years 11 months\" \"74 years 11 months\" \"74 years 10 months\"\n[133] \"75 years 01 month\"  \"75 years\"           \"82 years 01 month\" \n[136] \"74 years 03 months\" \"93 years 01 month\"  \"60 years\"          \n[139] \"60 years 08 months\" \"61 years 04 months\" \"94 years 11 months\"\n[142] \"90 years 05 months\" \"90 years 04 months\" \"46 years 06 months\"\n[145] \"47 years\"           \"52 years 05 months\" \"58 years 09 months\"\n[148] \"48 years 01 month\"  \"48 years\"           \"50 years\"          \n[151] \"90 years 02 months\" \"52 years 03 months\" \"60 years 05 months\"\n[154] \"94 years 04 months\" \"53 years 03 months\" \"82 years 10 months\"\n[157] \"93 years\"           \"50 years 01 month\"  \"47 years 06 months\"\n[160] \"96 years 05 months\" \"96 years 04 months\" \"74 years 01 month\" \n[163] \"80 years 08 months\" \"80 years 09 months\" \"86 years\"          \n[166] \"86 years 01 month\"  \"80 years\"           \"74 years 06 months\"\n[169] \"80 years 06 months\" \"90 years 01 month\"  \"78 years 02 months\"\n[172] \"78 years 07 months\" \"78 years 06 months\" \"55 years 07 months\"\n[175] \"94 years 05 months\" \"53 years 08 months\" \"53 years 09 months\"\n[178] \"73 years 08 months\" \"79 years 11 months\" \"72 years 01 month\" \n[181] \"72 years\"           \"79 years 01 month\"  \"65 years 11 months\"\n[184] \"66 years\"           \"92 years 07 months\" \"92 years\"          \n[187] \"89 years 11 months\" \"65 years 02 months\" \"79 years 06 months\"\n[190] \"66 years 09 months\" \"94 years\"           \"74 years 08 months\"\n[193] \"66 years 01 month\"  \"65 years 08 months\" \"75 years 04 months\"\n[196] \"75 years 05 months\" \"75 years 09 months\" \"80 years 05 months\"\n[199] \"66 years 07 months\" \"65 years 10 months\" \"79 years 04 months\"\n[202] \"79 years 07 months\" \"89 years 10 months\" \"79 years 10 months\"\n[205] \"91 years\"           \"92 years 11 months\" \"92 years 10 months\"\n[208] \"76 years 02 months\" \"81 years 10 months\" \"90 years 11 months\"\n[211] \"79 years 05 months\" \"78 years 10 months\" \"66 years 05 months\"\n[214] \"66 years 03 months\" \"75 years 10 months\" \"76 years 05 months\"\n[217] \"75 years 11 months\" \"79 years 03 months\" \"92 years 06 months\"\n[220] \"78 years 11 months\" \"53 years 04 months\" \"51 years 04 months\"\n[223] \"66 years 06 months\" \"54 years 11 months\" \"56 years 03 months\"\n[226] \"61 years 06 months\" \"54 years 02 months\" \"54 years 01 month\" \n[229] \"88 years 01 month\"  \"88 years\"           \"60 years 10 months\"\n[232] \"61 years 01 month\"  \"94 years 09 months\" \"93 years 06 months\"\n[235] \"90 years 07 months\" \"95 years 02 months\" \"95 years 04 months\"\n[238] \"61 years 10 months\" \"94 years 03 months\" \"67 years 05 months\"\n[241] \"76 years 06 months\" \"67 years 07 months\" \"69 years 06 months\"\n[244] \"77 years 03 months\" \"94 years 02 months\" \"94 years 10 months\"\n[247] \"76 years 10 months\" \"77 years\"           \"80 years 07 months\"\n[250] \"67 years 03 months\" \"67 years 09 months\" \"72 years 05 months\"\n[253] \"73 years 05 months\" \"73 years 03 months\" \"95 years 01 month\" \n[256] \"66 years 02 months\" \"76 years 07 months\" \"76 years 04 months\"\n[259] \"93 years 05 months\" \"80 years 02 months\" \"76 years 11 months\"\n[262] \"76 years 09 months\" \"80 years 04 months\" \"79 years 08 months\"\n[265] \"70 years 06 months\" \"73 years 04 months\" \"71 years 10 months\"\n[268] \"71 years 04 months\" \"72 years 08 months\" \"94 years 08 months\"\n[271] \"61 years 03 months\" \"56 years 02 months\" \"90 years 09 months\"\n[274] \"55 years 06 months\" \"95 years 08 months\" \"91 years 11 months\"\n[277] \"56 years 11 months\" \"57 years 10 months\" \"57 years 09 months\"\n[280] \"90 years 08 months\" \"58 years 08 months\" \"56 years 10 months\"\n[283] \"52 years 07 months\" \"50 years 07 months\" \"44 years\"          \n[286] \"46 years 01 month\"  \"44 years 01 month\"  \"46 years\"          \n[289] \"84 years 01 month\"  \"59 years\"           \"53 years 06 months\"\n[292] \"49 years 08 months\" \"77 years 05 months\" \"58 years 06 months\"\n[295] \"59 years 04 months\" \"88 years 11 months\" \"82 years 03 months\"\n[298] \"67 years 06 months\" \"83 years 11 months\" \"77 years 06 months\"\n[301] \"89 years 05 months\" \"60 years 02 months\" \"52 years 06 months\"\n[304] \"60 years 03 months\" \"70 years 03 months\" \"63 years 07 months\"\n[307] \"63 years 05 months\" \"63 years 09 months\" \"93 years 03 months\"\n[310] \"66 years 08 months\" \"64 years 09 months\" \"74 years 04 months\"\n[313] \"93 years 02 months\" \"74 years 07 months\" \"69 years 10 months\"\n[316] \"69 years 09 months\" \"76 years 03 months\" \"92 years 05 months\"\n[319] \"60 years 09 months\" \"66 years 11 months\" \"76 years 01 month\" \n[322] \"60 years 06 months\" \"61 years 05 months\" \"58 years 05 months\"\n[325] \"58 years 11 months\" \"59 years 09 months\" \"52 years 10 months\"\n[328] \"52 years 11 months\" \"52 years 09 months\" \"91 years 05 months\"\n[331] \"91 years 04 months\" \"53 years 11 months\" \"51 years 10 months\"\n[334] \"49 years 01 month\"  \"89 years 03 months\" \"87 years 03 months\"\n[337] \"92 years 01 month\"  \"92 years 04 months\" \"79 years 02 months\"\n[340] \"67 years 11 months\" \"66 years 10 months\" \"78 years 03 months\"\n[343] \"78 years 01 month\"  \"79 years 09 months\" \"77 years 07 months\"\n[346] \"77 years 08 months\" \"77 years 11 months\" \"78 years 04 months\"\n[349] \"68 years 01 month\"  \"67 years 08 months\" \"83 years 05 months\"\n[352] \"89 years 02 months\" \"87 years 04 months\" \"77 years 09 months\"\n[355] \"61 years 02 months\" \"81 years 04 months\" \"77 years 10 months\"\n[358] \"85 years 06 months\" \"67 years 04 months\" \"73 years 02 months\"\n[361] \"51 years 09 months\" \"81 years 06 months\" \"53 years 10 months\"\n[364] \"47 years 05 months\" \"51 years 01 month\"  \"95 years\"          \n[367] \"59 years 03 months\" \"51 years\"           \"49 years\"          \n[370] \"80 years 03 months\" \"64 years 04 months\" \"82 years\"          \n[373] \"51 years 02 months\" \"87 years 11 months\" \"53 years 07 months\"\n[376] \"81 years 05 months\" \"77 years 04 months\" \"81 years 07 months\"\n[379] \"52 years 04 months\" \"53 years\"           \"72 years 03 months\"\n[382] \"72 years 06 months\" \"73 years 07 months\" \"72 years 07 months\"\n[385] \"70 years\"           \"69 years 11 months\" \"71 years\"          \n[388] \"70 years 08 months\" \"72 years 10 months\" \"73 years 09 months\"\n[391] \"72 years 04 months\" \"70 years 07 months\" \"70 years 09 months\"\n[394] \"72 years 02 months\" \"71 years 03 months\" \"73 years 10 months\"\n[397] \"91 years 03 months\" \"91 years 06 months\" \"81 years\"          \n[400] \"80 years 11 months\" \"85 years\"           \"90 years\"          \n[403] \"89 years 07 months\" \"93 years 08 months\" \"84 years 11 months\"\n[406] \"86 years 03 months\" \"88 years 03 months\" \"90 years 03 months\"\n[409] \"90 years 06 months\" \"89 years 06 months\" \"88 years 02 months\"\n[412] \"89 years 09 months\" \"84 years 07 months\" \"92 years 03 months\"\n[415] \"93 years 09 months\" \"81 years 08 months\" \"47 years 07 months\"\n[418] \"93 years 04 months\" \"93 years 07 months\" \"51 years 05 months\"\n[421] \"47 years 01 month\"  \"50 years 05 months\" \"51 years 06 months\"\n[424] \"83 years 07 months\" \"83 years 10 months\" \"83 years 08 months\"\n[427] \"88 years 07 months\" \"85 years 07 months\" \"89 years 08 months\"\n[430] \"83 years 06 months\" \"85 years 08 months\" \"78 years 08 months\"\n[433] \"81 years 03 months\" \"87 years 08 months\" \"78 years 05 months\"\n[436] \"83 years 01 month\"  \"92 years 09 months\" \"92 years 08 months\"\n[439] \"84 years 08 months\" \"88 years 10 months\" \"85 years 05 months\"\n[442] \"83 years 02 months\" \"86 years 07 months\" \"86 years 06 months\"\n[445] \"86 years 05 months\" \"81 years 11 months\" \"87 years\"          \n[448] \"86 years 11 months\" \"91 years 07 months\" \"76 years 08 months\"\n[451] \"71 years 11 months\" \"65 years 03 months\" \"73 years 06 months\"\n[454] \"72 years 09 months\" \"60 years 11 months\" \"71 years 02 months\"\n[457] \"85 years 11 months\" \"73 years\"           \"74 years 02 months\"\n[460] \"48 years 07 months\" \"44 years 06 months\" \"45 years 06 months\"\n[463] \"86 years 04 months\" \"89 years 04 months\" \"74 years 09 months\"\n[466] \"52 years 08 months\" \"59 years 10 months\" \"54 years 06 months\"\n[469] \"75 years 03 months\" \"77 years 02 months\" \"81 years 01 month\" \n[472] \"71 years 06 months\" \"58 years 02 months\" \"76 years\"          \n[475] \"77 years 01 month\"  \"90 years 10 months\" \"70 years 02 months\"\n[478] \"92 years 02 months\" \"65 years 05 months\" \"63 years 11 months\"\n[481] \"53 years 02 months\" \"55 years 02 months\" \"54 years\"          \n[484] \"49 years 06 months\" \"52 years\"           \"50 years 08 months\"\n[487] \"69 years 03 months\" \"67 years\"           \"49 years 11 months\"\n[490] \"52 years 02 months\" \"82 years 09 months\" \"54 years 10 months\"\n[493] \"75 years 08 months\" \"51 years 03 months\" \"94 years 01 month\" \n[496] \"74 years\"           \"43 years 11 months\" \"49 years 10 months\"\n[499] \"45 years 11 months\" \"81 years 02 months\" \"95 years 06 months\"\n[502] \"67 years 10 months\" \"49 years 05 months\" \"53 years 05 months\"\n[505] \"70 years 11 months\" \"70 years 10 months\" \"87 years 07 months\"\n[508] \"91 years 02 months\" \"86 years 02 months\" \"47 years 04 months\"\n[511] \"51 years 11 months\" \"46 years 11 months\" \"47 years 08 months\"\n[514] \"87 years 06 months\" \"88 years 09 months\" \"87 years 02 months\"\n[517] \"45 years 05 months\" \"44 years 05 months\" \"46 years 04 months\"\n[520] \"73 years 01 month\"  \"71 years 05 months\" \"58 years 10 months\"\n[523] \"88 years 06 months\" \"88 years 05 months\" \"59 years 11 months\"\n[526] \"69 years 02 months\" \"47 years 10 months\" \"96 years 03 months\"\n[529] \"48 years 04 months\" \"44 years 03 months\" \"46 years 05 months\"\n[532] \"46 years 10 months\" \"82 years 07 months\" \"85 years 10 months\"\n[535] \"82 years 08 months\" \"48 years 03 months\" \"59 years 02 months\"\n[538] \"87 years 10 months\" \"71 years 09 months\" \"47 years 11 months\"\n[541] \"45 years 10 months\" \"83 years 09 months\" \"70 years 01 month\" \n[544] \"68 years 02 months\" \"89 years 01 month\"  \"87 years 01 month\" \n[547] \"85 years 04 months\" \"85 years 03 months\" \"83 years 03 months\"\n[550] \"48 years 10 months\" \"91 years 01 month\"  \"84 years 10 months\"\n[553] \"84 years 06 months\" \"84 years 05 months\" \"43 years 10 months\"\n[556] \"89 years\"           \"86 years 10 months\" \"71 years 08 months\"\n[559] \"85 years 09 months\" \"50 years 04 months\" \"45 years 04 months\"\n[562] \"48 years 11 months\" \"49 years 04 months\" \"44 years 04 months\"\n[565] \"46 years 03 months\" \"88 years 04 months\" \"68 years 11 months\"\n[568] \"49 years 09 months\" \"47 years 09 months\" \"44 years 02 months\"\n[571] \"47 years 03 months\" \"96 years 02 months\" \"87 years 09 months\"\n[574] \"71 years 01 month\"  \"71 years 07 months\" \"50 years 03 months\"\n[577] \"43 years 09 months\" \"45 years 09 months\" \"84 years 09 months\"\n[580] \"50 years 02 months\" \"84 years 04 months\" \"85 years 02 months\"\n[583] \"45 years 03 months\" \"49 years 03 months\" \"46 years 09 months\"\n[586] \"45 years 02 months\" \"50 years 06 months\" \"69 years\"          \n[589] \"46 years 08 months\" \"96 years\"           \"82 years 06 months\"\n[592] \"96 years 01 month\"  \"45 years 08 months\" \"68 years 04 months\"\n[595] \"85 years 01 month\"  \"48 years 08 months\" \"47 years 02 months\"\n[598] \"51 years 08 months\" \"84 years 03 months\" \"48 years 02 months\"\n[601] \"45 years 01 month\"  \"48 years 09 months\" \"69 years 01 month\" \n[604] \"95 years 07 months\" \"46 years 02 months\" \"82 years 05 months\"\n[607] \"45 years 07 months\" \"49 years 02 months\" \"43 years 08 months\"\n[610] \"86 years 09 months\" \"46 years 07 months\" \"68 years 10 months\"\n[613] \"43 years 07 months\" \"43 years 06 months\" \"68 years 03 months\"\n[616] \"84 years 02 months\" \"48 years 06 months\" \"45 years\"          \n[619] \"68 years 09 months\" \"95 years 10 months\" \"82 years 04 months\"\n[622] \"48 years 05 months\" \"84 years\"           \"44 years 11 months\"\n[625] \"86 years 08 months\" \"68 years 08 months\" \"95 years 09 months\"\n[628] \"43 years 05 months\" \"43 years 04 months\" \"68 years\"          \n[631] \"68 years 07 months\" \"68 years 06 months\" \"43 years 03 months\"\n[634] \"44 years 09 months\" \"68 years 05 months\" \"43 years 02 months\"\n[637] \"43 years 01 month\"  \"44 years 07 months\"\n\n\n\n\n\n\n\n\nNote\n\n\n\n*remaining lease is listed as a string and needed for the arrangement to be corrected moving foreward\n\n\n\nsummary(filter_flat_data$resale_price)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 200000  428000  515000  536391  610000 1418000 \n\n\n\n\nCorrecting the Data\nThis section deals with correcting the data last inspected previously.\n\nCorrecting the Storey Arrangement\nThe code adds corrects the order of the storey arrangement\n\nstorey_correct <- c(\"01 TO 03\", \"04 TO 06\", \"07 TO 09\", \"10 TO 12\", \"13 TO 15\", \"16 TO 18\", \"19 TO 21\", \"22 TO 24\", \"25 TO 27\", \"28 TO 30\", \"31 TO 33\", \"34 TO 36\", \"37 TO 39\", \"40 TO 42\", \"43 TO 45\", \"46 TO 48\", \"49 TO 51\")  \n\nuse_flat_data <- filter_flat_data %>%\n  mutate (storey_range = factor(storey_range, levels = storey_correct)) %>%\n  ungroup()\n\n\nggplot(data = use_flat_data,\n       aes(y = storey_range)) +\n  geom_bar() \n\n\n\n\n\n\nConverting Remaining Lease from String to Num\nThe code adds a new integer column derived from the remaining_lease string column.\n\n\n\n\n\n\nNote\n\n\n\nThis code uses the gsub-regex function to get the integer within the string.\n\n\n\nlease_ryear <- as.numeric(gsub(\"([0-9]+).*$\", \"\\\\1\", filter_flat_data$remaining_lease))\n\nuse_flat_data$lease_ryear <- lease_ryear\n\nuse_flat_data\n\n# A tibble: 24,374 × 12\n   month   town    flat_…¹ block stree…² store…³ floor…⁴ flat_…⁵ lease…⁶ remai…⁷\n   <chr>   <chr>   <chr>   <chr> <chr>   <fct>     <dbl> <chr>     <dbl> <chr>  \n 1 2022-01 ANG MO… 3 ROOM  320   ANG MO… 07 TO …      73 New Ge…    1977 54 yea…\n 2 2022-01 ANG MO… 3 ROOM  225   ANG MO… 07 TO …      67 New Ge…    1978 55 yea…\n 3 2022-01 ANG MO… 3 ROOM  331   ANG MO… 07 TO …      68 New Ge…    1981 58 yea…\n 4 2022-01 ANG MO… 3 ROOM  534   ANG MO… 07 TO …      82 New Ge…    1980 57 yea…\n 5 2022-01 ANG MO… 3 ROOM  578   ANG MO… 04 TO …      67 New Ge…    1980 57 yea…\n 6 2022-01 ANG MO… 3 ROOM  452   ANG MO… 01 TO …      83 New Ge…    1979 56 yea…\n 7 2022-01 ANG MO… 3 ROOM  560   ANG MO… 01 TO …      67 New Ge…    1980 57 yea…\n 8 2022-01 ANG MO… 3 ROOM  435   ANG MO… 04 TO …      67 New Ge…    1979 56 yea…\n 9 2022-01 ANG MO… 3 ROOM  435   ANG MO… 04 TO …      67 New Ge…    1979 56 yea…\n10 2022-01 ANG MO… 3 ROOM  560   ANG MO… 10 TO …      67 New Ge…    1980 57 yea…\n# … with 24,364 more rows, 2 more variables: resale_price <dbl>,\n#   lease_ryear <dbl>, and abbreviated variable names ¹​flat_type, ²​street_name,\n#   ³​storey_range, ⁴​floor_area_sqm, ⁵​flat_model, ⁶​lease_commence_date,\n#   ⁷​remaining_lease"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03.html#data-exploration-through-statistical-visualization",
    "href": "Take-home_Ex/Take-home_Ex03.html#data-exploration-through-statistical-visualization",
    "title": "Data Visualization Makeover 03",
    "section": "Data Exploration through Statistical Visualization",
    "text": "Data Exploration through Statistical Visualization\nThis section presents the statistical visualization and explanation of the data.\n\nOne-way ANOVA Test between Flat Type and Resale Price\n\n\nCode\nggbetweenstats(\n  data = use_flat_data,\n  x = flat_type,\n  y = resale_price, \n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02.html",
    "title": "Data Visualization Makeover 02",
    "section": "",
    "text": "The objective of this exercise is to critique and improve an Age-Sex Pyramid Analytic Visualization of Singapore of the year 2022. The output is to recreate a Trellis Chart Age-Sex Pyramid through R-Studios by using ggplot2, ggplot2 extensions and tidyverse packages.\nThe visualization is created using the Singapore Residents by Planning Area / Sub-zone, Age Group, Sex and Type of Dwelling, June 2022 (Singstat).\n\n\n\n\n\n\nNote\n\n\n\nThe output should be focused as a static Trellis Chart without filter interactivity.\n\n\n\n\nThe Original Visualization Source: https://public.tableau.com/app/profile/joseph.zexeong.tan/viz/SingaporePopulationPyramindJun2022v1_3/trel3x3_d?publish=yes\n\n\n\n\n\n\n\n\nThe Original Visualization shows 2 separate Age-Pyramid Trellis Chart that shows the same message. Two sets of visualization normally indicate that they visualize two different messages that may it be independent of each other or connected. The issue with the dashboard is that both sets indicate the same message just in a different format. This raises either confusion to the reader and a form of redundancy that can be best allocated to something else.\n3x3 Trellis Chart limits the visualization to only 9 Age-Sex Pyramids. Limited and focused visualizations are normally selected under a criteria. This criteria may be in terms of highest population cumulative or selective. The original visualization shows no indication of the criteria chosen to only visualize 9 areas and may only be concluded as a random selection.\n3x3 Trellis Chart lacks y-axis labels. Taking to consideration that the Trellis Charts is a stand alone visualization, the lack of y-axis label reduces the clarity of the y-axis values. Furthermore, both Trellis Charts lack x-axis values and labels but make up for it through text values per bar. In terms of clarity, one can argue that the lack of x-axis may confuse the reader due to the text values having no reference while others say the taxt vales are enough to compensate the lack of x-axis.\n\n\n\n\n\nText Values center bar alignment makes reading the values difficult. Due to the mismatched alignment of the text values brought abut by the central alignment placement in the bar chart makes reading the values difficult as the reader cannot simply scroll down and read the values, not mention creates unnecessary confusion in the graph.\nText Values on each Bar Chart overwhelms the visualization. More than the mismatch alignment, the number of the text values in the chart saturates the charts and makes it “noisy”. The text values fill the dashboard with a lot of numbers that is makes the labels and visuals difficult to look at and interpret.\nHorizontally arranged Trellis Chart limits and squeezes the Age-Sex Pyramids. This visualization arrangement artificially contorts the bar length due to the lack of width space. The squeeze minimizes the visual differentiation between bar charts as such creates an illusion that some bars are of the same size."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02.html#getting-started---data-loading-and-processing",
    "href": "Take-home_Ex/Take-home_Ex02.html#getting-started---data-loading-and-processing",
    "title": "Data Visualization Makeover 02",
    "section": "Getting Started - Data Loading and Processing",
    "text": "Getting Started - Data Loading and Processing\n\nInstalling and loading the required libraries\nBefore we get started, it is important for us to ensure that the required R packages have been installed.\n\npacman::p_load(tidyverse,ggplot2,knitr, plotly, skimr, questionr, funModeling, sf, tmap, quanteda, NLP, ggiraph)\n\n\n\nImporting Data\nThis code chunk is to import the data from respopagesextod2022.csv file to the Quarto/R page.\n\npop_data <- read_csv(\"data/respopagesextod2022.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe CSV File contains the following columns:\n\n\n\n\n\n\n\n\nCOLUMN NAME\nDATA TYPE\nDESCRIPTION\n\n\n\n\nPlanning Area (PA)\nCharacter\nDistinct Planning Areas in Singapore designated and mapped by the Government of Singapore\n\n\nSubzone (SZ)\nCharacter\nSub-areas within each Planning Areas\n\n\nAge Group (AG)\nCharacter\nSets of population age group by 5 (ex 0-4, 5-9, etc)\n\n\nSex\nCharacter\nBinary biological identifier of gender\n\n\nType of Dwelling (TOD)\nCharacter\nAvailable dwelling types in Sinagpore\n\n\nPopulation (Pop)\nNumerical\nPopulation per category\n\n\nTime\nNumerical\nYear -> 2022\n\n\n\n\n\nData Exploration and Cleaning\nThis section is to check incorrect and missing values in the data set.\n\nskimr::skim(pop_data)\n\n\nData summary\n\n\nName\npop_data\n\n\nNumber of rows\n100928\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nPA\n0\n1\n4\n23\n0\n55\n0\n\n\nSZ\n0\n1\n4\n29\n0\n332\n0\n\n\nAG\n0\n1\n6\n11\n0\n19\n0\n\n\nSex\n0\n1\n5\n7\n0\n2\n0\n\n\nTOD\n0\n1\n6\n39\n0\n8\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPop\n0\n1\n40.44\n125.73\n0\n0\n0\n20\n2300\n▇▁▁▁▁\n\n\nTime\n0\n1\n2022.00\n0.00\n2022\n2022\n2022\n2022\n2022\n▁▁▇▁▁"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02.html#create-age-sex-pyramid",
    "href": "Take-home_Ex/Take-home_Ex02.html#create-age-sex-pyramid",
    "title": "Data Visualization Makeover 02",
    "section": "Create Age-Sex Pyramid",
    "text": "Create Age-Sex Pyramid\nThis section explores the creation of an Age-Sex Pyramid.\n\nExploration of y-axis Data\n\nExp1 <- pop_data %>% \n  filter(PA == \"Ang Mo Kio\") %>%\n  group_by(AG, Sex) %>%\n  summarise(`sum_pop` = sum(`Pop`), n = n()) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\n\n\nggplot(data = Exp1,\n       aes(y = AG)) +\n  geom_bar() +\n  theme_bw() +  \n  ggtitle(\"Test: Age Group Distribution\") \n\n\n\n\nBased on the y-axis (Age Group), 2 issues are noticed:\n\nEach Age Group is written with an underscore (“_”) instead of a space in between each word/number\nThe values are organized alphabetically with consideration of the starting value (number or alphabet). As such “5_to_9” came before “45_to_49”\n\n\nCorrecting Age Labels\n\npop_data$AG <- gsub(\"_\", \" \", pop_data$AG, fixed = TRUE)\n\n\n\nCorrecting Sequence\n\nage_correct <- c(\"0 to 4\", \"5 to 9\", \"10 to 14\", \"15 to 19\", \"20 to 24\", \"25 to 29\", \"30 to 34\", \"35 to 39\", \"40 to 44\", \"45 to 49\", \"50 to 54\", \"55 to 59\", \"60 to 64\", \"65 to 69\", \"70 to 74\", \"75 to 79\", \"80 to 84\", \"85 to 89\", \"90 and over\")\n\npop_sg <- pop_data %>%\n  group_by(AG, Sex) %>%\n  summarise(`sum_pop` = sum(`Pop`)) %>%\n  mutate(AG = factor(AG, levels = age_correct)) %>%\n  arrange(AG) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'AG'. You can override using the `.groups`\nargument.\n\npop_sg <- pop_sg %>%\n  mutate(pct = scales::percent((sum_pop/sum(sum_pop)), accuracy = 0.01),\n         res = str_c(sum_pop, \", \", pct))\n\npop_pa <- pop_data %>%\n  group_by(PA, AG, Sex) %>%\n  summarise(`sum_pop` = sum(`Pop`)) %>%\n  mutate(AG = factor(AG, levels = age_correct)) %>%\n  arrange(AG) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'PA', 'AG'. You can override using the\n`.groups` argument.\n\npop_pa <- pop_pa %>%\n  mutate(pct = scales::percent((sum_pop/sum(sum_pop)), accuracy = 0.01),\n         res = str_c(sum_pop, \", \", pct))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02.html#creating-a-age-sex-pyramid",
    "href": "Take-home_Ex/Take-home_Ex02.html#creating-a-age-sex-pyramid",
    "title": "Data Visualization Makeover 02",
    "section": "Creating a Age-Sex Pyramid",
    "text": "Creating a Age-Sex Pyramid\nThis section explores the visualization of an Age-Sex Pyramid.\n\n\n\n\n\n\nNote\n\n\n\nThis section will be using the total Singapore data (cummulative of all Planning Area)\n\n\n\nSG_Pyr <- ggplot(pop_sg,\n                    aes(x = ifelse(Sex == \"Males\", \n                                   yes = sum_pop*(-1),\n                                   no = sum_pop),\n                        y = AG,\n                        fill = Sex)) + \n  geom_col() +\n  scale_x_continuous(limits = c(-170000, 170000),\n    breaks = seq(-200000, 200000, 50000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(200, 0, -50), \n                           seq(50, 200, 50))),\n                       \"k\")) +\n  scale_y_discrete(expand = expansion(mult = c(0, 0.01))) +\n  labs (x = \"Count of Population\", \n        y = \"Age Group\",\n        fill = \"Gender\",\n        title = \"Singapore Population Pyramid 2022\",\n        subtitle = \"Distribution of gender and age groups\",\n        caption = \"Data Source : Singstat.gov.sg, June 2022\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, \n                                  colour = \"#424242\",\n                                  face = \"bold\",\n                                  hjust = 0.5),\n        plot.subtitle = element_text(size = 8,\n                                     colour = \"#424242\",\n                                     hjust = 0.5),\n        plot.caption = element_text(size = 5,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        axis.ticks = element_line(colour = \"#424242\",\n                                  linewidth = 0.1),\n        axis.title.y = element_text(angle = 0, \n                                    size = 8, \n                                    colour = \"#424242\",\n                                    face = \"bold\",\n                                    vjust = 1.05,\n                                    hjust = 1,\n                                    margin = margin(r = -40, l = 10)),\n        axis.title.x = element_text(size = 8, \n                                    colour = \"#424242\",\n                                    face = \"bold\"),\n        axis.text.x = element_text(size = 7,\n                                   colour = \"#424242\"),\n        axis.text.y = element_text(size = 7,\n                                   colour = \"#424242\"),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.text = element_text(size = 7,\n                                   colour = \"#424242\"),\n        legend.title = element_text(size = 8, \n                                    colour = \"#424242\"),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#ffffff\"),\n        legend.background = element_rect(fill = \"#ffffff\"),\n        legend.margin = margin(t = -10),\n        panel.border = element_rect(colour = \"#424242\",\n                                    linewidth = 0.3)) \n  \nSG_Pyr"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02.html#creating-a-trellis-age-sex-pyramid",
    "href": "Take-home_Ex/Take-home_Ex02.html#creating-a-trellis-age-sex-pyramid",
    "title": "Data Visualization Makeover 02",
    "section": "Creating A Trellis Age-Sex Pyramid",
    "text": "Creating A Trellis Age-Sex Pyramid\nThis section explores the visualization of an Age-Sex Pyramid within a Trellis Chart. Each Pyramid indicates per Planning Area.\n\nRemoving Planning Areas without Values\nIt was previously identified that 26 out of 55 Planning Areas have no value/data. To maximize space, 9 Planning Areas will be retained and filtered.\n\n\n\n\n\n\nNote\n\n\n\nDue to the limitations of space in r generated visualization in quarto only a limited number of planning areas can be shown\n\n\n\nt_pop_pa <- pop_data %>%\n  group_by(PA) %>%\n  summarise(`sum_pop` = sum(`Pop`)) %>%\n  ungroup()\n\ntrellis9 <- arrange(t_pop_pa, desc(t_pop_pa$sum_pop)) %>%\n  slice(1:9) %>%\n  select(PA)\n\ntrellis9_filter <- pop_pa %>%\n  filter(pop_pa$PA %in% trellis9$PA)\n\n\n\nCreating Trellis Chart Age-Sex Pyramid\n\nPA_Pyr <- ggplot() +\n  geom_bar(data = subset(trellis9_filter, \n                         Sex == \"Males\"), \n           aes(x = AG, \n               y = -sum_pop, \n               fill = PA),\n           stat = \"identity\", \n           fill = \"#2E9598\") +\n  geom_bar(data = subset(trellis9_filter, \n                         Sex == \"Females\"), \n           aes(x = AG, \n               y = sum_pop, \n               fill = PA), \n           stat = \"identity\", \n           fill = \"#EC1B4B\") +\n  coord_flip() +\n  facet_wrap(.~ PA,\n             drop = FALSE, \n             ncol = 3,\n             scales = \"fixed\")+\n  scale_y_continuous(limits = c(-13000, 13000),\n                     breaks = seq(-20000, 20000, 5000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(200, 0, -50), \n                           seq(50, 200, 50))),\n                       \"k\"), \n                     expand = expansion(mult = c(0, .04)))+\n  labs (y = \"Population\", \n        x = \"Age Group\",\n        fill = \"Gender\",\n        title = \"Singapore Population Pyramid 2022\",\n        subtitle = \"Distribution of gender and age groups from Most Populated Planning Areas\",\n        caption = \"Data Source : Singstat.gov.sg, June 2022\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 14, \n                                  colour = \"#424242\",\n                                  face = \"bold\",\n                                  hjust = 0.5),\n        plot.subtitle = element_text(size = 8,\n                                     colour = \"#424242\",\n                                     hjust = 0.5),\n        plot.caption = element_text(size = 8,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        strip.text = element_text(size = 7,\n                                  colour = \"#424242\"),\n        strip.background = element_blank(),\n\n        axis.ticks = element_line(colour = \"#424242\",\n                                  linewidth = 0.5),\n        axis.ticks.x = element_line(colour = \"#424242\",\n                                  linewidth = 0.5),,\n        axis.title.y = element_text(angle = 0, \n                                    size = 8, \n                                    colour = \"#424242\",\n                                    vjust = 1.025,\n                                    hjust = 0.7,\n                                    margin = margin(r = -20, l = 20)),\n        axis.title.x = element_text(size = 8, \n                                    colour = \"#424242\"),\n        axis.text.x = element_text(size = 4,\n                                   colour = \"#424242\"),\n        axis.text.y = element_text(size = 4,\n                                   colour = \"#424242\"),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.text = element_text(size = 5,\n                                   colour = \"#424242\"),\n        legend.title = element_text(size = 8, \n                                    colour = \"#424242\"),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_line(linewidth = rel(0.5)),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#ffffff\"),\n        legend.background = element_rect(fill = \"#ffffff\"),\n        legend.margin = margin(t = -10),\n        panel.border = element_rect(colour = \"#424242\",\n                                    linewidth = 0.3)) \n\nPA_Pyr\n\n\n\n\n\n\nLearning from Practice\n\nClarity\n\nWith the subtitle indicating that these Planning Areas are the most populous in Singapore, the reader is more clear of the message. Not to mention that axis labels and ticks are present to further provide clarity.\nDue to the limitation of space, a 3x3 Trellis Chart may be the maximum representation that can at least maximize readability. Adding more Age-Sex Pyramids will diminish readability and make the chart more difficult to interpret. Furthermore, the limits in size also affects the font sizes, thus reducing clarity and readability.\n\n\n\nAesthetic\n\nThe removal of bar numbers lessens the elements present in the visualization and makes in more pleasing to look at. This less “noisy” visualization greatly improves its aesthetic and design.\n\n\n\nInteractivity\n\nCrafting the visualization in R Studios is more difficult and restrictive as the limits in visual size restrict creative and engaging visuals. Furthermore, transitioning to interactivity may be difficult in the future as the limitations may complicate it further. Future visualization may be better crafted in R Shiny instead of quarto/R Studios."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02.html#further-improvements-and-developments",
    "href": "Take-home_Ex/Take-home_Ex02.html#further-improvements-and-developments",
    "title": "Data Visualization Makeover 02",
    "section": "Further Improvements and Developments",
    "text": "Further Improvements and Developments\nThis section improves upon the original visualization by increasing size and adding interactivity.\n\nIncreasing Visualization Size\n\n\nCode\nPA_Pyr <- ggplot() +\n  geom_bar(data = subset(trellis9_filter, \n                         Sex == \"Males\"), \n           aes(x = AG, \n               y = -sum_pop, \n               fill = PA),\n           stat = \"identity\", \n           fill = \"#2E9598\") +\n  geom_bar(data = subset(trellis9_filter, \n                         Sex == \"Females\"), \n           aes(x = AG, \n               y = sum_pop, \n               fill = PA), \n           stat = \"identity\", \n           fill = \"#EC1B4B\") +\n  coord_flip() +\n  facet_wrap(.~ PA,\n             drop = FALSE, \n             ncol = 3,\n             scales = \"fixed\")+\n  scale_y_continuous(limits = c(-13000, 13000),\n                     breaks = seq(-20000, 20000, 5000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(200, 0, -50), \n                           seq(50, 200, 50))),\n                       \"k\"), \n                     expand = expansion(mult = c(0, .04)))+\n  labs (y = \"Population\", \n        x = \"Age Group\",\n        fill = \"Gender\",\n        title = \"Singapore Population Pyramid 2022\",\n        subtitle = \"Distribution of gender and age groups from Most Populated Planning Areas\",\n        caption = \"Data Source : Singstat.gov.sg, June 2022\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 20, \n                                  colour = \"#424242\",\n                                  face = \"bold\",\n                                  hjust = 0.5),\n        plot.subtitle = element_text(size = 14,\n                                     colour = \"#424242\",\n                                     hjust = 0.5),\n        plot.caption = element_text(size = 12,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        strip.text = element_text(size = 12,\n                                  colour = \"#424242\"),\n        strip.background = element_blank(),\n\n        axis.ticks = element_line(colour = \"#424242\",\n                                  linewidth = 0.5),\n        axis.ticks.x = element_line(colour = \"#424242\",\n                                  linewidth = 0.5),,\n        axis.title.y = element_text(angle = 0, \n                                    size = 12, \n                                    colour = \"#424242\",\n                                    vjust = 1.025,\n                                    hjust = 0.7,\n                                    margin = margin(r = -50, l = 50)),\n        axis.title.x = element_text(size = 12, \n                                    colour = \"#424242\"),\n        axis.text.x = element_text(size = 10,\n                                   colour = \"#424242\"),\n        axis.text.y = element_text(size = 10,\n                                   colour = \"#424242\"),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.text = element_text(size = 12,\n                                   colour = \"#424242\"),\n        legend.title = element_text(size = 12, \n                                    colour = \"#424242\"),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_line(linewidth = rel(0.5)),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#ffffff\"),\n        legend.background = element_rect(fill = \"#ffffff\"),\n        legend.margin = margin(t = -10),\n        panel.border = element_rect(colour = \"#424242\",\n                                    linewidth = 0.3)) \n\nPA_Pyr\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAdditional Codes:\nTo Increase Visualization size:\n#| fig-height: 12 #| fig-width: 12\nTo allow option to hide codes upon render:\n#| code-fold: true\n\n\n\n\nAdding Visualization\nThis section applies the ggiraph package to add interactive visualization per Bar within the Age Sex Pyramid.\n\n\nCode\nPA_Pyr <- ggplot() +\n  geom_bar_interactive(data = subset(trellis9_filter, \n                         Sex == \"Males\"), \n                       aes(x = AG, \n                           y = -sum_pop, \n                           fill = PA,\n                           tooltip =  paste0(\"Sex= \", Sex,\n  \"\\n Age Group= \", AG,\n  \"\\n Population= \", sum_pop)),\n                       stat = \"identity\", \n                       fill = \"#2E9598\") +\n  geom_bar_interactive(data = subset(trellis9_filter, \n                         Sex == \"Females\"), \n                       aes(x = AG, \n                           y = sum_pop, \n                           fill = PA,\n                           tooltip =  paste0(\"Sex= \", Sex,\n  \"\\n Age Group= \", AG,\n  \"\\n Population= \", sum_pop)), \n                       stat = \"identity\", \n                       fill = \"#EC1B4B\") +\n  coord_flip() +\n  facet_wrap(.~ PA,\n             drop = FALSE, \n             ncol = 3,\n             scales = \"fixed\")+\n  scale_y_continuous(limits = c(-13000, 13000),\n                     breaks = seq(-20000, 20000, 5000), \n                     labels = paste0(\n                       as.character(\n                         c(seq(200, 0, -50), \n                           seq(50, 200, 50))),\n                       \"k\"), \n                     expand = expansion(mult = c(0, .04)))+\n  labs (y = \"Population\", \n        x = \"Age Group\",\n        fill = \"Gender\",\n        title = \"Singapore Population Pyramid 2022\",\n        subtitle = \"Distribution of gender and age groups from Most Populated Planning Areas\",\n        caption = \"Data Source : Singstat.gov.sg, June 2022\") +\n  theme_bw() +\n  theme(plot.title = element_text(size = 36, \n                                  colour = \"#424242\",\n                                  face = \"bold\",\n                                  hjust = 0.5),\n        plot.subtitle = element_text(size = 28,\n                                     colour = \"#424242\",\n                                     hjust = 0.5),\n        plot.caption = element_text(size = 24,\n                                    colour = \"#424242\",\n                                    hjust = 0),\n        strip.text = element_text(size = 24,\n                                  colour = \"#424242\"),\n        strip.background = element_blank(),\n\n        axis.ticks = element_line(colour = \"#424242\",\n                                  linewidth = 0.5),\n        axis.ticks.x = element_line(colour = \"#424242\",\n                                  linewidth = 0.5),,\n        axis.title.y = element_text(angle = 0, \n                                    size = 24, \n                                    colour = \"#424242\",\n                                    vjust = 1.025,\n                                    hjust = 0.7,\n                                    margin = margin(r = -90, l = 90)),\n        axis.title.x = element_text(size = 24, \n                                    colour = \"#424242\"),\n        axis.text.x = element_text(size = 20,\n                                   colour = \"#424242\"),\n        axis.text.y = element_text(size = 20,\n                                   colour = \"#424242\"),\n        legend.position = \"bottom\",\n        legend.justification = \"left\",\n        legend.text = element_text(size = 24,\n                                   colour = \"#424242\"),\n        legend.title = element_text(size = 24, \n                                    colour = \"#424242\"),\n        panel.grid.major = element_line(linewidth = rel(0.5)),\n        panel.grid.major.x = element_line(linewidth = rel(0.5)),\n        panel.grid.minor = element_blank(),\n        plot.background = element_rect(fill = \"#ffffff\"),\n        legend.background = element_rect(fill = \"#ffffff\"),\n        legend.margin = margin(t = -10),\n        panel.border = element_rect(colour = \"#424242\",\n                                    linewidth = 0.3)) \n\ngirafe(\n  ggobj = PA_Pyr,\n  width_svg = 24,\n  height_svg = 36*0.618\n)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03.html",
    "href": "In-Class_Ex/In-Class_Ex03.html",
    "title": "In-Class Exercise 03",
    "section": "",
    "text": "Two packages will be installed and loaded. They are tidyverse and ggiraph.\n\npacman::p_load(ggiraph, tidyverse)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03.html#importing-data",
    "href": "In-Class_Ex/In-Class_Ex03.html#importing-data",
    "title": "In-Class Exercise 03",
    "section": "Importing Data",
    "text": "Importing Data\nThis code chunk is to import the data from Exam_data.csv file to the Quarto/R page.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03.html#exploration-and-trial",
    "href": "In-Class_Ex/In-Class_Ex03.html#exploration-and-trial",
    "title": "In-Class Exercise 03",
    "section": "Exploration and Trial",
    "text": "Exploration and Trial\n\nGraphs and Visualization through ggplot2 and ggiraph\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04.html",
    "title": "In-Class Exercise 04",
    "section": "",
    "text": "This is a walk through of In-Class Exercise 4"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04.html#getting-started---plotly-and-statistical-visualization",
    "href": "In-Class_Ex/In-Class_Ex04.html#getting-started---plotly-and-statistical-visualization",
    "title": "In-Class Exercise 04",
    "section": "Getting Started - Plotly and Statistical Visualization",
    "text": "Getting Started - Plotly and Statistical Visualization\n\nInstalling and Loading R Packages\n\npacman::p_load(plotly, DT, patchwork, crosstalk, ggstatsplot, readxl, performance, parameters, see, tidyverse)\n\n\n\nImporting Data\nThis code chunk is to import the data from Exam_data.csv file to the Quarto/R page.\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\nWorking with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\nCreating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\n\nTwo-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\nSignificant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04.html#getting-started---visualizing-models",
    "href": "In-Class_Ex/In-Class_Ex04.html#getting-started---visualizing-models",
    "title": "In-Class Exercise 04",
    "section": "Getting Started - Visualizing Models",
    "text": "Getting Started - Visualizing Models\n\nInstalling and Loading R Packages\n\npacman::p_load(plotly, DT, patchwork, crosstalk, ggstatsplot, readxl, performance, parameters, see, tidyverse)\n\n\n\nImporting Data\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\n\n\nMultiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nModel Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n <- check_normality(model1)\n\nplot(check_n)\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h <- check_heteroscedasticity(model1)\n\nplot(check_h)\n\n\n\n\n\n\nModel Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggplot2 methods\nThe code chunk below performs the followings:\n\ngroup the observation by RACE,\ncomputes the count of observations, mean, standard deviation and standard error of Maths by RACE, and\nsave the output as a tibble data table called my_sum.\n\n\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggplot2 methods\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE,-mean), \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.95, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"95% confidence interval of mean maths score by race\")\n\n\n\n\n\np <- ggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE,-mean), \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.99, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"99% confidence interval of mean maths score by race\")\n\npp <- highlight(ggplotly(p))\n\nd <- highlight_key(my_sum)\n\ncrosstalk::bscols(pp,\n                  DT::datatable(d))"
  }
]